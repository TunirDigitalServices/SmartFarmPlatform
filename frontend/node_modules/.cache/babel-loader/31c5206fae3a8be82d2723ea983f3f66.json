{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/prod/smartfarm/backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/prod/smartfarm/backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/var/www/prod/smartfarm/backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport api from '../api/api';\n\nvar useSensorData = function useSensorData() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      sensorData = _useState2[0],\n      setSensorData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allDataSensor = _useState4[0],\n      setAllDataSensor = _useState4[1];\n\n  var location = useLocation();\n  var userId = location.pathname.split('/')[2];\n  console.log(location);\n  console.log(userId);\n  var userUid = JSON.parse(localStorage.getItem('user')).id;\n  var fieldUid = localStorage.getItem('Field');\n  var url = '/sensor/sensor-update-data';\n\n  if (JSON.parse(localStorage.getItem('user')).role === \"ROLE_SUPPLIER\" && location.pathname === \"/Fields/\".concat(userId, \"/\").concat(fieldUid)) {\n    url = '/supplier/sensor-data';\n  }\n\n  var data = {\n    userUid: userUid,\n    fieldUid: fieldUid,\n    userId: userId\n  };\n\n  var getDataSensor = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return api.post(url, data).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n                  var dataSensor, allDataSensor;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          dataSensor = response.data.sensors;\n                          allDataSensor = [];\n                          _context.next = 4;\n                          return dataSensor.map(function (item) {\n                            var sensorsData = item.sensorsData;\n\n                            if (sensorsData.length > 0) {\n                              var maxDataSensor;\n\n                              for (var i = 0; i < sensorsData.length; i++) {\n                                if (maxDataSensor == null || parseInt(sensorsData[i]['id']) > parseInt(maxDataSensor['id'])) maxDataSensor = sensorsData[i];\n                              } //  let maxDataSensor =  getMax(sensorsData,\"id\")\n\n\n                              [maxDataSensor].map(function (data) {\n                                allDataSensor.push({\n                                  id: data.id,\n                                  code: data.code,\n                                  sensor_id: data.sensor_id,\n                                  uid: data.uid,\n                                  time: data.time,\n                                  temperature: data.temperature,\n                                  humidity: data.humidity,\n                                  pressure: data.pressure,\n                                  charge: data.charge,\n                                  adc: data.adc,\n                                  ts: data.ts,\n                                  mv1: data.mv1,\n                                  mv2: data.mv2,\n                                  mv3: data.mv3,\n                                  altitude: data.altitude\n                                });\n                              });\n                            }\n                          });\n\n                        case 4:\n                          setSensorData(dataSensor);\n                          setAllDataSensor(allDataSensor);\n\n                        case 6:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()).catch(function (error) {\n                console.log(error);\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getDataSensor() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getDataSensor();\n    setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return getDataSensor();\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    })), 30000);\n  }, []);\n  return allDataSensor;\n};\n\nexport default useSensorData;","map":{"version":3,"names":["React","useEffect","useState","useLocation","api","useSensorData","sensorData","setSensorData","allDataSensor","setAllDataSensor","location","userId","pathname","split","console","log","userUid","JSON","parse","localStorage","getItem","id","fieldUid","url","role","data","getDataSensor","post","then","response","dataSensor","sensors","map","item","sensorsData","length","maxDataSensor","i","parseInt","push","code","sensor_id","uid","time","temperature","humidity","pressure","charge","adc","ts","mv1","mv2","mv3","altitude","catch","error","setInterval"],"sources":["/var/www/prod/smartfarm/backoffice/frontend/src/utils/useSensorData.js"],"sourcesContent":["import React ,{useEffect,useState} from 'react'\nimport { useLocation } from 'react-router-dom';\nimport api from '../api/api'\n\nconst useSensorData = () => {\n    const [sensorData, setSensorData] = useState([]);\n    const [allDataSensor, setAllDataSensor] = useState([]);\n    let location = useLocation()\n    let userId = location.pathname.split('/')[2]\n    console.log(location)\n    console.log(userId)\n    let userUid = JSON.parse(localStorage.getItem('user')).id\n    let fieldUid = localStorage.getItem('Field')\n    let url = '/sensor/sensor-update-data'\n    if((JSON.parse(localStorage.getItem('user')).role === \"ROLE_SUPPLIER\") && location.pathname === `/Fields/${userId}/${fieldUid}`){\n      url = '/supplier/sensor-data'\n    }\n    let data = {\n        userUid : userUid,\n        fieldUid : fieldUid,\n        userId : userId\n      }\n      const getDataSensor = async () => {\n         await api.post(url,data)\n          .then(async response=>{\n            let dataSensor = response.data.sensors\n                let allDataSensor = [];\n                await dataSensor.map(item => {\n                  let sensorsData = item.sensorsData\n                  if(sensorsData.length > 0){\n                    let maxDataSensor;\n                    for (let i=0 ; i<sensorsData.length ; i++) {\n                        if (maxDataSensor == null || parseInt(sensorsData[i]['id']) > parseInt(maxDataSensor['id']))\n                        maxDataSensor = sensorsData[i];\n                    }\n                  //  let maxDataSensor =  getMax(sensorsData,\"id\")\n                   [maxDataSensor].map(data => {\n                      allDataSensor.push({\n                        id : data.id,\n                      code: data.code,\n                      sensor_id: data.sensor_id,\n                      uid : data.uid,\n                      time :data.time,\n                      temperature :data.temperature,\n                      humidity :data.humidity,\n                      pressure :data.pressure,\n                      charge :data.charge,\n                      adc :data.adc,\n                      ts :data.ts,\n                      mv1 : data.mv1,\n                      mv2 : data.mv2,\n                      mv3 :data.mv3,\n                      altitude :data.altitude\n                    });\n                    })\n                  }\n                });\n                setSensorData(dataSensor)\n                setAllDataSensor(allDataSensor)\n          }).catch(error=>{\n            console.log(error)\n          })\n\n      }\n  useEffect(()=>{\n     getDataSensor();\n     \n     setInterval(async () => {\n        await getDataSensor()\n      \n    }, 30000);\n  },[])\nreturn allDataSensor\n\n\n}\n\nexport default useSensorData"],"mappings":"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"},"metadata":{},"sourceType":"module"}