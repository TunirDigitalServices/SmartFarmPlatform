{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\smartFarm\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\n\nvar useGeoLocation = function useGeoLocation() {\n  var _useState = useState({\n    loaded: false,\n    coordinates: {\n      lat: \"\",\n      lng: \"\"\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var onSuccess = function onSuccess(location) {\n    setLocation({\n      loaded: true,\n      coordinates: {\n        lat: location.coords.latitude,\n        lng: location.coords.longitude\n      }\n    });\n  };\n\n  var onError = function onError(error) {\n    setLocation({\n      loaded: true,\n      error: error\n    });\n  };\n\n  useEffect(function () {\n    if (!(\"geolocation\" in navigator)) {\n      onError({\n        message: \"geoLocation not supported\"\n      });\n    }\n\n    navigator.geolocation.getCurrentPosition(onSuccess, onError);\n  }, []);\n  return location;\n};\n\nexport default useGeoLocation;","map":{"version":3,"names":["React","useState","useEffect","useGeoLocation","loaded","coordinates","lat","lng","location","setLocation","onSuccess","coords","latitude","longitude","onError","error","navigator","message","geolocation","getCurrentPosition"],"sources":["C:/Users/lenovo/Desktop/smartFarm/backoffice/frontend/src/utils/useGeoLocation.js"],"sourcesContent":["import React ,{useState,useEffect} from 'react'\r\n\r\n\r\nconst useGeoLocation = () => {\r\n  const [location,setLocation] = useState({\r\n    loaded :false,\r\n    coordinates :{lat : \"\" , lng :\"\"}\r\n  })\r\n    \r\n  const onSuccess = (location) => {\r\n       setLocation({   \r\n            loaded : true,\r\n            coordinates :{\r\n                lat : location.coords.latitude,\r\n                lng : location.coords.longitude\r\n            }\r\n        })\r\n  }\r\n\r\n  const onError = (error) => {\r\n    setLocation({\r\n        loaded : true,\r\n        error,\r\n    })\r\n}\r\n\r\n  useEffect(()=>{\r\n    if(!(\"geolocation\" in navigator)){\r\n        onError({\r\n            message : \"geoLocation not supported\"\r\n        })\r\n\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(onSuccess ,onError)\r\n  },[])\r\n  \r\n    return location  \r\n  \r\n}\r\n\r\nexport default useGeoLocation"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;;AAGA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;EAAA,gBACIF,QAAQ,CAAC;IACtCG,MAAM,EAAE,KAD8B;IAEtCC,WAAW,EAAE;MAACC,GAAG,EAAG,EAAP;MAAYC,GAAG,EAAE;IAAjB;EAFyB,CAAD,CADZ;EAAA;EAAA,IACpBC,QADoB;EAAA,IACXC,WADW;;EAM3B,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACF,QAAD,EAAc;IAC3BC,WAAW,CAAC;MACPL,MAAM,EAAG,IADF;MAEPC,WAAW,EAAE;QACTC,GAAG,EAAGE,QAAQ,CAACG,MAAT,CAAgBC,QADb;QAETL,GAAG,EAAGC,QAAQ,CAACG,MAAT,CAAgBE;MAFb;IAFN,CAAD,CAAX;EAOJ,CARD;;EAUA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;IACzBN,WAAW,CAAC;MACRL,MAAM,EAAG,IADD;MAERW,KAAK,EAALA;IAFQ,CAAD,CAAX;EAIH,CALC;;EAOAb,SAAS,CAAC,YAAI;IACZ,IAAG,EAAE,iBAAiBc,SAAnB,CAAH,EAAiC;MAC7BF,OAAO,CAAC;QACJG,OAAO,EAAG;MADN,CAAD,CAAP;IAIH;;IAEDD,SAAS,CAACE,WAAV,CAAsBC,kBAAtB,CAAyCT,SAAzC,EAAoDI,OAApD;EACD,CATQ,EASP,EATO,CAAT;EAWE,OAAON,QAAP;AAEH,CApCD;;AAsCA,eAAeL,cAAf"},"metadata":{},"sourceType":"module"}