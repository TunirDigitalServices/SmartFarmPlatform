{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _objectAssign = _interopRequireDefault(require(\"object-assign\"));\n\nvar _defaults = require(\"../defaults\");\n\nvar _stylesheet = _interopRequireDefault(require(\"../stylesheet\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* React Notification Component */\n\n\nvar Toast = /*#__PURE__*/function (_React$Component) {\n  _inherits(Toast, _React$Component);\n\n  function Toast() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Toast);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Toast)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      containerStyle: _stylesheet[\"default\"].styles.container\n    });\n\n    return _this;\n  }\n\n  _createClass(Toast, [{\n    key: \"getToastStyle\",\n    value: function getToastStyle() {\n      var _this$props = this.props,\n          type = _this$props.type,\n          color = _this$props.color;\n      var styles = _stylesheet[\"default\"].styles;\n      var contentStyle = {};\n      /* If type is set, merge toast action styles with base */\n\n      switch (type) {\n        case 'success':\n        case 'error':\n        case 'warning':\n        case 'info':\n          contentStyle = (0, _objectAssign[\"default\"])({}, styles.content, _defaults.defaults.colors[type]);\n          break;\n\n        case 'custom':\n          {\n            var customStyle = {\n              backgroundColor: color.background,\n              color: color.text\n            };\n            contentStyle = (0, _objectAssign[\"default\"])({}, styles.content, customStyle);\n          }\n          break;\n\n        default:\n          contentStyle = (0, _objectAssign[\"default\"])({}, styles.content);\n          break;\n      }\n\n      return contentStyle;\n    }\n  }, {\n    key: \"animateState\",\n    value: function animateState() {\n      var _this2 = this;\n\n      var styles = _stylesheet[\"default\"].styles; // Show\n\n      setTimeout(function () {\n        _this2.updateStyle(styles.show);\n      }, 100); // wait 100ms after the component is called to animate toast.\n      // Timeout -1 displays toast as a persistent notification\n\n      if (this.props.timeout === -1) {\n        return;\n      } // Hide after timeout\n\n\n      setTimeout(function () {\n        _this2.updateStyle(styles.hide);\n      }, this.props.timeout);\n    } // Updates the style of the container with styles for a state (hide/show).\n    // This triggers animations.\n\n  }, {\n    key: \"updateStyle\",\n    value: function updateStyle(stateStyle) {\n      var styles = _stylesheet[\"default\"].styles;\n      this.setState({\n        containerStyle: (0, _objectAssign[\"default\"])({}, styles.container, stateStyle)\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animateState();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var text = this.props.text;\n      var containerStyle = this.state.containerStyle;\n      return _react[\"default\"].createElement(\"div\", {\n        className: \"toast-notification\",\n        style: containerStyle\n      }, _react[\"default\"].createElement(\"span\", {\n        style: this.getToastStyle()\n      }, text));\n    }\n  }]);\n\n  return Toast;\n}(_react[\"default\"].Component);\n\n_defineProperty(Toast, \"propTypes\", {\n  text: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].element]),\n  timeout: _propTypes[\"default\"].number,\n  type: _propTypes[\"default\"].string,\n  color: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].object, _propTypes[\"default\"].string]),\n  style: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].object, _propTypes[\"default\"].bool])\n});\n\nvar _default = Toast;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}