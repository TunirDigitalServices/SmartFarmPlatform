{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Restored Files\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Restored Files\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Restored Files\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Restored Files\\\\backoffice\\\\frontend\\\\src\\\\views\\\\map.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer, Polygon, Circle, FeatureGroup, Marker, Popup, useMap, Tooltip, useMapEvents } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./Styles.css\";\nimport useGeoLocation from \"../utils/useGeoLocation\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport api from \"../api/api\";\nimport L from 'leaflet';\nimport MarkerObject from \"./MarkerMap\";\nimport { useRef } from \"react\";\nimport LeafletGeoCoder from \"./LeafletGeoCoder\";\nvar zoomDefault = 14;\nvar centerDefault = [36.806389, 10.181667];\nvar myIcon = new L.Icon({\n  iconUrl: require('../images/icons/icon.png'),\n  iconSize: [40, 45],\n  iconAnchor: [17, 45],\n  popupAnchor: [3, -46]\n});\nvar Iconsensor = new L.Icon({\n  iconUrl: require('../images/icons/sensor.png'),\n  iconSize: [40, 42],\n  iconAnchor: [17, 45],\n  popupAnchor: [3, -46]\n});\nvar currentPage = window.location.pathname;\n\nvar SetViewOnClick = function SetViewOnClick(_ref) {\n  var center = _ref.center,\n      zoom = _ref.zoom;\n  var map = useMap();\n  map.setView(center, zoom);\n  return null;\n};\n\nvar LeafletMap = function LeafletMap(_ref2) {\n  var type = _ref2.type,\n      data = _ref2.data,\n      _onCreated = _ref2._onCreated,\n      _onEdited = _ref2._onEdited,\n      draw = _ref2.draw,\n      edit = _ref2.edit,\n      sensor = _ref2.sensor,\n      farms = _ref2.farms,\n      fields = _ref2.fields,\n      zoom = _ref2.zoom,\n      center = _ref2.center,\n      fromAction = _ref2.fromAction,\n      uid = _ref2.uid;\n  var mapRef = useRef(null);\n\n  var _useState = useState([36.806389, 10.181667]),\n      _useState2 = _slicedToArray(_useState, 2),\n      mapCenter = _useState2[0],\n      setMapCenter = _useState2[1];\n\n  var _useState3 = useState(10),\n      _useState4 = _slicedToArray(_useState3, 2),\n      zoomLevel = _useState4[0],\n      setZoomLevel = _useState4[1];\n\n  var getCenterFromSensors = function getCenterFromSensors() {\n    if (sensor && sensor.length > 0) {\n      var firstSensor = sensor[0];\n\n      if (firstSensor.Latitude && firstSensor.Longitude) {\n        return [Number(firstSensor.Latitude), Number(firstSensor.Longitude)];\n      }\n    }\n\n    return null;\n  };\n\n  useEffect(function () {\n    var updateMapCenter = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var centerFromSensors;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                centerFromSensors = getCenterFromSensors();\n\n                if (centerFromSensors) {\n                  setMapCenter(centerFromSensors);\n                  setZoomLevel(16.5);\n                  mapRef.current.setView(centerFromSensors, zoomLevel);\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function updateMapCenter() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    updateMapCenter();\n  }, [sensor, mapRef, zoomLevel]);\n  var location = useGeoLocation();\n\n  var returnedMap = function returnedMap(L) {\n    switch (currentPage) {\n      case '/AddSensor':\n        return farms.map(function (item, indx) {\n          var coordinates = [];\n          var coord = JSON.parse(item.coordinates);\n\n          if (coord) {\n            coord.map(function (co) {\n              coordinates.push(Object.values(co));\n            });\n          }\n\n          if (coord) {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Polygon, {\n              key: indx,\n              positions: coordinates,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 11\n              }\n            }, \" \"), data.map(function (item, indx) {\n              if (item.Latitude && item.Longitude) {\n                return /*#__PURE__*/React.createElement(MarkerObject, {\n                  key: indx,\n                  lat: item.Latitude,\n                  long: item.Longitude,\n                  name: item.code,\n                  id: item.id,\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 83,\n                    columnNumber: 27\n                  }\n                });\n              }\n            }));\n          }\n        });\n\n      case '/':\n        return data.map(function (item, indx) {\n          var coordinates = [];\n          var fields = item.fields;\n          var sensorsCoord = [];\n          fields.map(function (field) {\n            var coord = JSON.parse(field.coordinates);\n\n            if (coord) {\n              coord.map(function (co) {\n                coordinates.push(Object.values(co));\n              });\n            }\n\n            var sensors = field.sensors;\n\n            if (sensors) {\n              sensors.map(function (sensor) {\n                if (sensor.Latitude && sensor.Longitude) {\n                  sensorsCoord.push({\n                    code: sensor.code,\n                    Latitude: sensor.Latitude,\n                    Longitude: sensor.Longitude\n                  });\n                }\n              });\n            }\n          });\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Polygon, {\n            color: \"#28A6B7\",\n            key: indx,\n            positions: coordinates,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 18\n            }\n          }), sensor && sensor.map(function (sensors, indx) {\n            if (sensors.Latitude && sensors.Longitude) {\n              return /*#__PURE__*/React.createElement(Marker, {\n                icon: Iconsensor,\n                key: indx,\n                position: [sensors.Latitude, sensors.Longitude],\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 34\n                }\n              }, /*#__PURE__*/React.createElement(Popup, {\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 29\n                }\n              }, sensors.code));\n            } // <MarkerObject key={indx} lat={sensors.Latitude} long={sensors.Longitude} name={sensors.code} id={sensors.id}></MarkerObject>\n\n          }));\n        });\n\n      case '/Dashboard-supplier':\n        return /*#__PURE__*/React.createElement(React.Fragment, null, sensor.map(function (sensors, indx) {\n          return /*#__PURE__*/React.createElement(MarkerObject, {\n            key: indx,\n            lat: sensors.Latitude,\n            long: sensors.Longitude,\n            name: sensors.code,\n            id: sensors.id,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 33\n            }\n          }); //<Marker icon={Iconsensor} key={indx} position={[sensors.Latitude, sensors.Longitude]}>\n          //   <Popup>{sensors.code}</Popup>\n          // </Marker>\n        }));\n\n      case \"/admin/user/\".concat(uid, \"/farms\"):\n        return data.map(function (item, indx) {\n          var coordinates = [];\n          var coord = JSON.parse(item.coordinates);\n\n          if (coord) {\n            coord.map(function (co) {\n              coordinates.push(Object.values(co));\n            });\n          }\n\n          if (coord) {\n            return /*#__PURE__*/React.createElement(Polygon, {\n              key: indx,\n              positions: coordinates,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 22\n              }\n            }, /*#__PURE__*/React.createElement(MarkerObject, {\n              key: indx,\n              lat: item.Latitude,\n              long: item.Longitude,\n              name: item.name,\n              id: item.id,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 23\n              }\n            }));\n          } else {\n            return /*#__PURE__*/React.createElement(MarkerObject, {\n              key: indx,\n              lat: item.Latitude,\n              long: item.Longitude,\n              name: item.name,\n              id: item.id,\n              zoom: zoom,\n              center: center,\n              fromAction: fromAction,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 22\n              }\n            });\n          }\n        });\n\n      case \"/admin/user/\".concat(uid, \"/fields\"):\n        return data.map(function (item, indx) {\n          var coordinates = [];\n          var coord = JSON.parse(item.coordinates);\n\n          if (coord) {\n            coord.map(function (co) {\n              coordinates.push(Object.values(co));\n            });\n          }\n\n          if (coord) {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Polygon, {\n              key: indx,\n              positions: coordinates,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 13\n              }\n            }, \" \"), fields && fields.map(function (item, indx) {\n              if (item.Latitude) {\n                return /*#__PURE__*/React.createElement(MarkerObject, {\n                  key: indx,\n                  lat: item.Latitude,\n                  long: item.Longitude,\n                  name: item.title,\n                  id: item.id,\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 227,\n                    columnNumber: 21\n                  }\n                });\n              }\n            }));\n          }\n        });\n\n      case \"/admin/user/\".concat(uid, \"/sensors\"):\n        return farms && farms.map(function (item, indx) {\n          var coordinates = [];\n          var coord = JSON.parse(item.coordinates);\n\n          if (coord) {\n            coord.map(function (co) {\n              coordinates.push(Object.values(co));\n            });\n          }\n\n          if (coord) {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Polygon, {\n              key: indx,\n              positions: coordinates,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 9\n              }\n            }, \" \"), data.map(function (item, indx) {\n              if (item.Latitude && item.Longitude) {\n                return /*#__PURE__*/React.createElement(MarkerObject, {\n                  key: indx,\n                  lat: item.Latitude,\n                  long: item.Longitude,\n                  name: item.code,\n                  id: item.id,\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 255,\n                    columnNumber: 25\n                  }\n                });\n              }\n            }));\n          }\n        });\n    }\n  };\n\n  var userSensorCenter = getCenterFromSensors();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MapContainer, {\n    style: {\n      borderRadius: 20,\n      boxShadow: '1px 1px 10px #bbb',\n      height: 300\n    },\n    className: \"markercluster-map\",\n    zoom: zoomLevel,\n    center: mapCenter,\n    maxZoom: 18,\n    whenCreated: function whenCreated(map) {\n      mapRef.current = map; // Assign the map instance to mapRef.current\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FeatureGroup, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(EditControl, {\n    draw: draw,\n    edit: edit,\n    position: \"topright\",\n    onCreated: _onCreated,\n    onEdited: _onEdited,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(TileLayer, {\n    url: \"http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}\",\n    subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(LeafletGeoCoder, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }\n  }), location.loaded && !location.error && /*#__PURE__*/React.createElement(Marker, {\n    icon: myIcon,\n    position: [location.coordinates.lat, location.coordinates.lng],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Popup, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }\n  }, \"My position\")), fromAction ? /*#__PURE__*/React.createElement(SetViewOnClick, {\n    center: center.length !== 0 ? center : centerDefault,\n    zoom: zoom === \"\" ? zoomDefault : zoom,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 11\n    }\n  }) : null, returnedMap(L)));\n};\n\nexport default LeafletMap;","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Polygon","Circle","FeatureGroup","Marker","Popup","useMap","Tooltip","useMapEvents","useGeoLocation","EditControl","api","L","MarkerObject","useRef","LeafletGeoCoder","zoomDefault","centerDefault","myIcon","Icon","iconUrl","require","iconSize","iconAnchor","popupAnchor","Iconsensor","currentPage","window","location","pathname","SetViewOnClick","center","zoom","map","setView","LeafletMap","type","data","_onCreated","_onEdited","draw","edit","sensor","farms","fields","fromAction","uid","mapRef","mapCenter","setMapCenter","zoomLevel","setZoomLevel","getCenterFromSensors","length","firstSensor","Latitude","Longitude","Number","updateMapCenter","centerFromSensors","current","returnedMap","item","indx","coordinates","coord","JSON","parse","co","push","Object","values","code","id","sensorsCoord","field","sensors","name","title","userSensorCenter","borderRadius","boxShadow","height","loaded","error","lat","lng"],"sources":["C:/Restored Files/backoffice/frontend/src/views/map.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { MapContainer, TileLayer, Polygon, Circle, FeatureGroup, Marker, Popup, useMap, Tooltip, useMapEvents } from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"./Styles.css\";\r\nimport useGeoLocation from \"../utils/useGeoLocation\";\r\nimport { EditControl } from \"react-leaflet-draw\";\r\nimport api from \"../api/api\";\r\nimport L from 'leaflet';\r\nimport MarkerObject from \"./MarkerMap\"\r\nimport { useRef } from \"react\";\r\nimport LeafletGeoCoder from \"./LeafletGeoCoder\";\r\n\r\nconst zoomDefault = 14;\r\nlet centerDefault = [36.806389, 10.181667];\r\nconst myIcon = new L.Icon({\r\n  iconUrl: require('../images/icons/icon.png'),\r\n  iconSize: [40, 45],\r\n  iconAnchor: [17, 45],\r\n  popupAnchor: [3, -46]\r\n})\r\n\r\nconst Iconsensor = new L.Icon({\r\n  iconUrl: require('../images/icons/sensor.png'),\r\n  iconSize: [40, 42],\r\n  iconAnchor: [17, 45],\r\n  popupAnchor: [3, -46]\r\n})\r\n\r\nlet currentPage = window.location.pathname\r\n\r\nconst  SetViewOnClick = ({ center , zoom }) => {\r\n  const map = useMap();\r\n  map.setView(center, zoom);\r\n\r\n  return null;\r\n}\r\n\r\nconst LeafletMap = ({ type, data, _onCreated, _onEdited, draw, edit ,sensor,farms,fields, zoom, center, fromAction,uid}) => {\r\n  const mapRef = useRef(null);\r\n  const [mapCenter, setMapCenter] = useState([36.806389, 10.181667]);\r\n  const [zoomLevel, setZoomLevel] = useState(10);\r\n  const getCenterFromSensors = () => {\r\n    if (sensor && sensor.length > 0) {\r\n      const firstSensor = sensor[0];\r\n      if(firstSensor.Latitude && firstSensor.Longitude){\r\n        return [Number(firstSensor.Latitude), Number(firstSensor.Longitude)];\r\n\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n  useEffect(() => {\r\n    const updateMapCenter = async () => {\r\n      const centerFromSensors = getCenterFromSensors();\r\n      if (centerFromSensors) {\r\n        setMapCenter(centerFromSensors);\r\n        setZoomLevel(16.5)\r\n        mapRef.current.setView(centerFromSensors, zoomLevel);\r\n      }\r\n    };\r\n  \r\n    updateMapCenter();\r\n  }, [sensor, mapRef, zoomLevel]);\r\n  const location = useGeoLocation();\r\n\r\n  const returnedMap = (L) => {\r\n    switch (currentPage) {\r\n      case '/AddSensor':\r\n        return farms.map((item, indx) => {\r\n          let coordinates = []\r\n          let coord = JSON.parse(item.coordinates)\r\n          if (coord) {\r\n            coord.map(co => {\r\n              coordinates.push(Object.values(co))\r\n            })\r\n          }\r\n        if(coord){\r\n          return <>\r\n          <Polygon key={indx} positions={coordinates}> </Polygon>\r\n          {\r\n          data.map((item, indx) => {\r\n                if (item.Latitude && item.Longitude) {\r\n                  return  <MarkerObject key={indx} lat={item.Latitude} long={item.Longitude} name={item.code} id={item.id}></MarkerObject>\r\n      \r\n      \r\n      \r\n                }\r\n              })\r\n\r\n          }\r\n          </>\r\n\r\n        }\r\n\r\n        })\r\n      case '/':\r\n        return data.map((item, indx) => {\r\n          let coordinates = []\r\n          let fields = item.fields;\r\n          let sensorsCoord = []\r\n          fields.map(field => {\r\n            let coord = JSON.parse(field.coordinates)\r\n            if (coord) {\r\n              coord.map(co => {\r\n                coordinates.push(Object.values(co))\r\n              })\r\n            }\r\n            let sensors = field.sensors;\r\n              if(sensors){\r\n\r\n                sensors.map(sensor => {\r\n                  if(sensor.Latitude && sensor.Longitude){\r\n                    sensorsCoord.push({\r\n                      code: sensor.code,\r\n                      Latitude: sensor.Latitude,\r\n                      Longitude: sensor.Longitude\r\n                    })\r\n\r\n                  }\r\n                })\r\n              }\r\n          })\r\n            return (\r\n                <>\r\n                 <Polygon color=\"#28A6B7\" key={indx} positions={coordinates}>\r\n                    {/* <MarkerObject key={indx} lat={item.Latitude} long={item.Longitude} name={item.name} id={item.id}></MarkerObject> */}\r\n              </Polygon> \r\n                   {/* <Polygon key={indx} positions={coordinates}> */}\r\n              \r\n                    {/* <Marker key={indx} position={[item.Latitude, item.Longitude]}>\r\n                      <Popup>{item.name}</Popup>\r\n                    </Marker> */}\r\n                  {/* </Polygon>  */}\r\n                  {\r\n\r\n                sensor && sensor.map((sensors, indx) => {\r\n                       if(sensors.Latitude && sensors.Longitude){\r\n\r\n                         return(\r\n                                 <Marker icon={Iconsensor} key={indx} position={[sensors.Latitude, sensors.Longitude]}>\r\n                            <Popup >{sensors.code}</Popup>\r\n                          </Marker>\r\n                          )\r\n                       }\r\n                      // <MarkerObject key={indx} lat={sensors.Latitude} long={sensors.Longitude} name={sensors.code} id={sensors.id}></MarkerObject>\r\n  \r\n\r\n                      \r\n                    }\r\n  \r\n                    )\r\n                    \r\n                  }\r\n                </>\r\n              )\r\n\r\n          \r\n\r\n        })\r\n        case '/Dashboard-supplier':\r\n           \r\n              return (\r\n                  <>\r\n                    {/* <Polygon key={indx} positions={coordinates}>\r\n                \r\n                      <Marker key={indx} position={[item.Latitude, item.Longitude]}>\r\n                        <Popup>{item.name}</Popup>\r\n                      </Marker>\r\n                    </Polygon> */}\r\n                    {\r\n  \r\n                      sensor.map((sensors, indx) => {\r\n                         return <MarkerObject key={indx} lat={sensors.Latitude} long={sensors.Longitude} name={sensors.code} id={sensors.id}></MarkerObject>\r\n    \r\n                        //<Marker icon={Iconsensor} key={indx} position={[sensors.Latitude, sensors.Longitude]}>\r\n                        //   <Popup>{sensors.code}</Popup>\r\n                        // </Marker>\r\n  \r\n                        \r\n                      }\r\n    \r\n                      )\r\n                      \r\n                    }\r\n                  </>\r\n                )\r\n\r\n  \r\n      case `/admin/user/${uid}/farms` : \r\n          return data.map((item, indx) => {\r\n            let coordinates = []\r\n            let coord = JSON.parse(item.coordinates)\r\n            if (coord) {\r\n              coord.map(co => {\r\n                coordinates.push(Object.values(co))\r\n              })\r\n            }\r\n            if (coord) {\r\n              return <Polygon key={indx} positions={coordinates}>\r\n                      <MarkerObject key={indx} lat={item.Latitude} long={item.Longitude} name={item.name} id={item.id}></MarkerObject>\r\n                </Polygon>\r\n            } else {\r\n              return <MarkerObject key={indx} lat={item.Latitude} long={item.Longitude} name={item.name} id={item.id} zoom={zoom} center={center} fromAction={fromAction}></MarkerObject>\r\n            }\r\n  \r\n  \r\n          })\r\n      case `/admin/user/${uid}/fields` :     \r\n      return data.map((item, indx) => {\r\n        let coordinates = []\r\n        let coord = JSON.parse(item.coordinates)\r\n        if (coord) {\r\n          coord.map(co => {\r\n            coordinates.push(Object.values(co))\r\n          })\r\n        }\r\n      if(coord){\r\n        return (\r\n            <>\r\n            <Polygon key={indx} positions={coordinates}> </Polygon>\r\n          \r\n            {\r\n              fields && fields.map((item,indx)=>{\r\n                if(item.Latitude){\r\n                  return(\r\n\r\n                    <MarkerObject key={indx} lat={item.Latitude} long={item.Longitude} name={item.title} id={item.id}></MarkerObject>\r\n\r\n                  )\r\n\r\n                }\r\n              })\r\n            }\r\n            </>\r\n\r\n        )\r\n      }\r\n\r\n      })\r\n      case `/admin/user/${uid}/sensors` :     \r\n      return farms && farms.map((item, indx) => {\r\n        let coordinates = []\r\n        let coord = JSON.parse(item.coordinates)\r\n        if (coord) {\r\n          coord.map(co => {\r\n            coordinates.push(Object.values(co))\r\n          })\r\n        }\r\n      if(coord){\r\n        return <>\r\n        <Polygon key={indx} positions={coordinates}> </Polygon>\r\n        {\r\n        data.map((item, indx) => {\r\n              if (item.Latitude && item.Longitude) {\r\n                return  <MarkerObject key={indx} lat={item.Latitude} long={item.Longitude} name={item.code} id={item.id}></MarkerObject>\r\n    \r\n    \r\n    \r\n              }\r\n            })\r\n\r\n        }\r\n        </>\r\n\r\n      }\r\n\r\n      })\r\n    }\r\n  }\r\n\r\n  let userSensorCenter = getCenterFromSensors()\r\n\r\n  return (\r\n    <div>\r\n      <MapContainer\r\n      style={{borderRadius :20,boxShadow : '1px 1px 10px #bbb',height:300}}\r\n        className=\"markercluster-map\"\r\n        zoom={zoomLevel}\r\n        center={mapCenter}\r\n        maxZoom={18}\r\n        whenCreated={(map) => {\r\n          mapRef.current = map; // Assign the map instance to mapRef.current\r\n        }}\r\n      >\r\n        <FeatureGroup>\r\n          <EditControl draw={draw} edit={edit} position=\"topright\" onCreated={_onCreated} onEdited={_onEdited} />\r\n        </FeatureGroup>\r\n        <TileLayer\r\n        \r\n        url='http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}'\r\n        subdomains={['mt0','mt1','mt2','mt3']}\r\n          \r\n        />\r\n        <LeafletGeoCoder />\r\n        {location.loaded && !location.error && (\r\n          <Marker icon={myIcon} position={[location.coordinates.lat, location.coordinates.lng]}>\r\n            <Popup>My position</Popup>\r\n          </Marker>\r\n        )}\r\n        {\r\n          fromAction\r\n          ?\r\n          <SetViewOnClick center={center.length !== 0 ? center : centerDefault} zoom={zoom === \"\" ? zoomDefault : zoom} />\r\n          :\r\n          null\r\n        }\r\n\r\n        {returnedMap(L)}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LeafletMap;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}