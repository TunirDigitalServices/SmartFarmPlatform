{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/prod/smartfarm/backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/prod/smartfarm/backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/var/www/prod/smartfarm/backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport api from '../api/api';\n\nvar useSensorData = function useSensorData() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      sensorData = _useState2[0],\n      setSensorData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allDataSensor = _useState4[0],\n      setAllDataSensor = _useState4[1];\n\n  var location = useLocation();\n  var userId = location.pathname.split('/')[2];\n  var userUid = JSON.parse(localStorage.getItem('user')).id;\n  var fieldUid = localStorage.getItem('Field');\n  var url = '/sensor/sensor-update-data';\n\n  if (JSON.parse(localStorage.getItem('user')).role === \"ROLE_SUPPLIER\" && location.pathname === \"/Fields/\".concat(userId, \"/\").concat(fieldUid)) {\n    url = '/supplier/sensor-data';\n  }\n\n  if (JSON.parse(localStorage.getItem('user')).role === \"ROLE_SUPPLIER\" && location.pathname === \"/Dashboard-supplier\") {\n    url = '/supplier/get-sensors-data';\n  }\n\n  var data = {\n    userUid: userUid,\n    fieldUid: fieldUid,\n    userId: userId\n  };\n\n  var applyMapping = function applyMapping(value, key, date, dataMappings) {\n    var mappedValue = value;\n    var dateMappingSelected = \"\"; // Gather all possible date mappings for the key\n\n    var arrayDates = dataMappings.map(function (mapping) {\n      return mapping.date[\"\".concat(key, \"_date\")];\n    }).filter(Boolean); // Sort dates and find the most recent valid date for the mapping\n\n    if (arrayDates.length > 0) {\n      arrayDates.push(date.slice(0, 10));\n      arrayDates.sort();\n      arrayDates.forEach(function (dateMapping, i) {\n        if (dateMapping === date.slice(0, 10) && typeof arrayDates[i - 1] !== \"undefined\") {\n          dateMappingSelected = arrayDates[i - 1];\n        }\n      });\n    } // Apply mapping if the selected date exists\n\n\n    if (dateMappingSelected) {\n      dataMappings.forEach(function (mapping) {\n        var keyData = \"\".concat(key, \"_date\");\n        var keyDataMax = \"\".concat(key, \"_max\");\n        var keyDataMin = \"\".concat(key, \"_min\");\n\n        if (dateMappingSelected === mapping.date[keyData]) {\n          var min = parseFloat(mapping.min[keyDataMin]);\n          var max = parseFloat(mapping.max[keyDataMax]);\n\n          if (value >= min && value <= max) {\n            mappedValue = ((value - min) / (max - min) * 100).toFixed(2);\n          } else if (value < min) {\n            mappedValue = 100;\n          } else if (value > max) {\n            mappedValue = 0;\n          }\n        }\n      });\n    }\n\n    return mappedValue;\n  };\n\n  var getDataSensor = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, sensors, dataMappings, updatedSensorData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return api.post(url, data);\n\n            case 3:\n              response = _context.sent;\n              sensors = response.data.sensors;\n              dataMappings = response.data.dataMapping;\n              updatedSensorData = sensors.map(function (sensor) {\n                var mappedCharge = 0;\n                var date = sensor.time;\n                var vals = [sensor.mv1, sensor.mv2, sensor.mv3];\n\n                if (sensor) {\n                  var chargeMin = 73;\n                  var chargeMax = 100;\n                  mappedCharge = ((Number(sensor.charge) - chargeMin) / (chargeMax - chargeMin) * 100).toFixed(2);\n                  mappedCharge = Math.max(0, Math.min(100, mappedCharge));\n                }\n\n                var mappedValues = vals.map(function (val, index) {\n                  var key = \"Mv\".concat(index + 1);\n                  return applyMapping(val, key, date, dataMappings);\n                });\n                return {\n                  code: sensor.code,\n                  sensor_id: sensor.sensor_id,\n                  time: sensor.time,\n                  temperature: sensor.temperature,\n                  humidity: sensor.humidity,\n                  pressure: sensor.pressure,\n                  charge: mappedCharge,\n                  signal: sensor.signal,\n                  adc: sensor.adc,\n                  ts: sensor.ts,\n                  mv1: mappedValues[0],\n                  mv2: mappedValues[1],\n                  mv3: mappedValues[2],\n                  originalmv1: sensor.mv1,\n                  originalmv2: sensor.mv2,\n                  originalmv3: sensor.mv3,\n                  altitude: sensor.altitude,\n                  mapping: response.data.dataMapping\n                };\n              });\n              setSensorData(sensors);\n              setAllDataSensor(updatedSensorData);\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 11]]);\n    }));\n\n    return function getDataSensor() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getDataSensor();\n    var intervalId = setInterval(function () {\n      getDataSensor();\n    }, 30000);\n    return function () {\n      return clearInterval(intervalId);\n    };\n  }, []);\n  return allDataSensor;\n};\n\nexport default useSensorData;","map":{"version":3,"names":["React","useEffect","useState","useLocation","api","useSensorData","sensorData","setSensorData","allDataSensor","setAllDataSensor","location","userId","pathname","split","userUid","JSON","parse","localStorage","getItem","id","fieldUid","url","role","data","applyMapping","value","key","date","dataMappings","mappedValue","dateMappingSelected","arrayDates","map","mapping","filter","Boolean","length","push","slice","sort","forEach","dateMapping","i","keyData","keyDataMax","keyDataMin","min","parseFloat","max","toFixed","getDataSensor","post","response","sensors","dataMapping","updatedSensorData","sensor","mappedCharge","time","vals","mv1","mv2","mv3","chargeMin","chargeMax","Number","charge","Math","mappedValues","val","index","code","sensor_id","temperature","humidity","pressure","signal","adc","ts","originalmv1","originalmv2","originalmv3","altitude","console","log","intervalId","setInterval","clearInterval"],"sources":["/var/www/prod/smartfarm/backoffice/frontend/src/utils/useSensorData.js"],"sourcesContent":["import React ,{useEffect,useState} from 'react'\nimport { useLocation } from 'react-router-dom';\nimport api from '../api/api'\n\nconst useSensorData = () => {\n    const [sensorData, setSensorData] = useState([]);\n    const [allDataSensor, setAllDataSensor] = useState([]);\n    let location = useLocation();\n    let userId = location.pathname.split('/')[2];\n    let userUid = JSON.parse(localStorage.getItem('user')).id;\n    let fieldUid = localStorage.getItem('Field');\n    let url = '/sensor/sensor-update-data';\n    \n    if ((JSON.parse(localStorage.getItem('user')).role === \"ROLE_SUPPLIER\") && location.pathname === `/Fields/${userId}/${fieldUid}`) {\n        url = '/supplier/sensor-data';\n    }\n    if ((JSON.parse(localStorage.getItem('user')).role === \"ROLE_SUPPLIER\") && location.pathname === `/Dashboard-supplier`) {\n        url = '/supplier/get-sensors-data';\n    }\n\n    let data = {\n        userUid: userUid,\n        fieldUid: fieldUid,\n        userId: userId\n    };\n\n    const applyMapping = (value, key, date, dataMappings) => {\n        let mappedValue = value;\n        let dateMappingSelected = \"\";\n\n        // Gather all possible date mappings for the key\n        const arrayDates = dataMappings.map(mapping => mapping.date[`${key}_date`]).filter(Boolean);\n\n        // Sort dates and find the most recent valid date for the mapping\n        if (arrayDates.length > 0) {\n            arrayDates.push(date.slice(0, 10));\n            arrayDates.sort();\n\n            arrayDates.forEach((dateMapping, i) => {\n                if (dateMapping === date.slice(0, 10) && typeof arrayDates[i - 1] !== \"undefined\") {\n                    dateMappingSelected = arrayDates[i - 1];\n                }\n            });\n        }\n\n        // Apply mapping if the selected date exists\n        if (dateMappingSelected) {\n            dataMappings.forEach(mapping => {\n                const keyData = `${key}_date`;\n                const keyDataMax = `${key}_max`;\n                const keyDataMin = `${key}_min`;\n\n                if (dateMappingSelected === mapping.date[keyData]) {\n                    const min = parseFloat(mapping.min[keyDataMin]);\n                    const max = parseFloat(mapping.max[keyDataMax]);\n\n                    if (value >= min && value <= max) {\n                        mappedValue = (((value - min) / (max - min)) * 100).toFixed(2);\n                    } else if (value < min) {\n                        mappedValue = 100;\n                    } else if (value > max) {\n                        mappedValue = 0;\n                    }\n                }\n            });\n        }\n\n        return mappedValue;\n    };\n\n    const getDataSensor = async () => {\n        try {\n            const response = await api.post(url, data);\n            const sensors = response.data.sensors;\n            const dataMappings = response.data.dataMapping;\n\n            const updatedSensorData = sensors.map(sensor => {\n                let mappedCharge = 0;\n                const date = sensor.time;\n                const vals = [sensor.mv1, sensor.mv2, sensor.mv3];\n\n                if (sensor) {\n                    const chargeMin = 73;\n                    const chargeMax = 100;\n                    mappedCharge = ((Number(sensor.charge) - chargeMin) / (chargeMax - chargeMin) * 100).toFixed(2);\n                    mappedCharge = Math.max(0, Math.min(100, mappedCharge));\n                }\n\n                const mappedValues = vals.map((val, index) => {\n                    const key = `Mv${index + 1}`;\n                    return applyMapping(val, key, date, dataMappings);\n                });\n\n                return {\n                    code: sensor.code,\n                    sensor_id: sensor.sensor_id,\n                    time: sensor.time,\n                    temperature: sensor.temperature,\n                    humidity: sensor.humidity,\n                    pressure: sensor.pressure,\n                    charge: mappedCharge,\n                    signal: sensor.signal,\n                    adc: sensor.adc,\n                    ts: sensor.ts,\n                    mv1: mappedValues[0],\n                    mv2: mappedValues[1],\n                    mv3: mappedValues[2],\n                    originalmv1: sensor.mv1,\n                    originalmv2: sensor.mv2,\n                    originalmv3: sensor.mv3,\n                    altitude: sensor.altitude,\n                    mapping: response.data.dataMapping,\n                };\n            });\n\n            setSensorData(sensors);\n            setAllDataSensor(updatedSensorData);\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    useEffect(() => {\n        getDataSensor();\n\n        const intervalId = setInterval(() => {\n            getDataSensor();\n        }, 30000);\n\n        return () => clearInterval(intervalId);\n    }, []);\n\n    return allDataSensor;\n};\n\nexport default useSensorData;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}