{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\smartFarm\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\smartFarm\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\smartFarm\\\\backoffice\\\\frontend\\\\src\\\\views\\\\SatteliteMap.js\";\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { MapContainer, TileLayer, Polygon, FeatureGroup, Marker, Popup } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./Styles.css\";\nimport useGeoLocation from \"../utils/useGeoLocation\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport L from 'leaflet';\nimport LeafletGeoCoder from \"./LeafletGeoCoder\";\nimport { ScaleControl } from 'react-leaflet';\nimport Legend from \"./Legend\";\n\nvar SatteliteMap = function SatteliteMap(_ref) {\n  var data = _ref.data,\n      selectedImageUrl = _ref.selectedImageUrl;\n  var location = useGeoLocation();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      polygonCoords = _useState2[0],\n      setPolygonCoords = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      markers = _useState4[0],\n      setMarkers = _useState4[1];\n\n  var _useState5 = useState([36.806389, 10.181667]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mapCenter = _useState6[0],\n      setMapCenter = _useState6[1];\n\n  var _useState7 = useState(17),\n      _useState8 = _slicedToArray(_useState7, 1),\n      zoomLevel = _useState8[0];\n\n  var mapRef = useRef(null);\n  var imageOverlayRef = useRef(null);\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      bounds = _useState10[0],\n      setBounds = _useState10[1];\n\n  console.log(data); // Initialize map with field data\n\n  useEffect(function () {\n    if (data && data.length > 0 && data[0]) {\n      var field = data[0];\n      var latitude = Number(field.Latitude);\n      var longitude = Number(field.Longitude); // Set marker position\n\n      setMarkers([latitude, longitude]);\n      setMapCenter([latitude, longitude]); // Parse and set polygon coordinates\n\n      try {\n        if (field.coordinates) {\n          var parsedCoords = JSON.parse(field.coordinates); // Ensure that parsedCoords is an array of objects like [{Lat: xx, Long: xx}, ...]\n\n          if (Array.isArray(parsedCoords)) {\n            var formattedCoords = parsedCoords.map(function (coord) {\n              return [coord.Lat, coord.Long]; // Ensure [Lat, Long] format for Leaflet\n            });\n            setPolygonCoords(formattedCoords); // Set the coordinates state\n\n            calculateImageBounds(formattedCoords); // Calculate the bounds based on the coordinates\n          }\n        }\n      } catch (e) {\n        console.error(\"Error parsing coordinates:\", e);\n      }\n    }\n  }, [data]); // Handle selected image URL changes\n\n  useEffect(function () {\n    if (selectedImageUrl && bounds && mapRef.current) {\n      // Remove previous overlay if exists\n      if (imageOverlayRef.current) {\n        imageOverlayRef.current.remove();\n      } // Create new image overlay\n\n\n      imageOverlayRef.current = L.imageOverlay(selectedImageUrl, bounds, {\n        opacity: 0.8,\n        interactive: true\n      }).addTo(mapRef.current); // Fit bounds to show the entire image\n\n      mapRef.current.fitBounds(bounds);\n    }\n\n    return function () {\n      if (imageOverlayRef.current) {\n        imageOverlayRef.current.remove();\n      }\n    };\n  }, [selectedImageUrl, bounds]); // Calculate bounds from polygon coordinates\n  // Calculate bounds from polygon coordinates\n\n  var calculateImageBounds = function calculateImageBounds(coordinates) {\n    if (!coordinates || coordinates.length === 0) return;\n    var lats = coordinates.map(function (coord) {\n      return coord[0];\n    });\n    var lngs = coordinates.map(function (coord) {\n      return coord[1];\n    });\n    var newBounds = [[Math.min.apply(Math, _toConsumableArray(lats)), Math.min.apply(Math, _toConsumableArray(lngs))], // South West corner\n    [Math.max.apply(Math, _toConsumableArray(lats)), Math.max.apply(Math, _toConsumableArray(lngs))] // North East corner\n    ];\n    setBounds(newBounds); // Update the bounds state\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MapContainer, {\n    ref: mapRef,\n    style: {\n      borderRadius: 20,\n      boxShadow: '1px 1px 10px #bbb',\n      height: 300\n    },\n    className: \"markercluster-map\",\n    zoom: zoomLevel,\n    center: mapCenter,\n    whenCreated: function whenCreated(map) {\n      mapRef.current = map;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FeatureGroup, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ScaleControl, {\n    position: \"bottomleft\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(TileLayer, {\n    maxNativeZoom: 18,\n    maxZoom: 20,\n    url: \"http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}\",\n    subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    map: mapRef.current,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(LeafletGeoCoder, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }), location.loaded && !location.error && /*#__PURE__*/React.createElement(Marker, {\n    position: [location.coordinates.lat, location.coordinates.lng],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Popup, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, \"My position\")), markers.length > 0 && data && data[0] && /*#__PURE__*/React.createElement(Marker, {\n    position: [markers[0], markers[1]],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Popup, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, data[0].title)), polygonCoords.length > 0 && /*#__PURE__*/React.createElement(Polygon // pathOptions={{ color: '#26A6B7', opacity: 0.5 }}\n  , {\n    positions: polygonCoords,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default SatteliteMap;","map":{"version":3,"names":["React","useState","useEffect","useRef","MapContainer","TileLayer","Polygon","FeatureGroup","Marker","Popup","useGeoLocation","EditControl","L","LeafletGeoCoder","ScaleControl","Legend","SatteliteMap","data","selectedImageUrl","location","polygonCoords","setPolygonCoords","markers","setMarkers","mapCenter","setMapCenter","zoomLevel","mapRef","imageOverlayRef","bounds","setBounds","console","log","length","field","latitude","Number","Latitude","longitude","Longitude","coordinates","parsedCoords","JSON","parse","Array","isArray","formattedCoords","map","coord","Lat","Long","calculateImageBounds","e","error","current","remove","imageOverlay","opacity","interactive","addTo","fitBounds","lats","lngs","newBounds","Math","min","max","borderRadius","boxShadow","height","loaded","lat","lng","title"],"sources":["C:/Users/lenovo/Desktop/smartFarm/backoffice/frontend/src/views/SatteliteMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { MapContainer, TileLayer, Polygon, FeatureGroup, Marker, Popup } from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"./Styles.css\";\r\nimport useGeoLocation from \"../utils/useGeoLocation\";\r\nimport { EditControl } from \"react-leaflet-draw\";\r\nimport L from 'leaflet';\r\nimport LeafletGeoCoder from \"./LeafletGeoCoder\";\r\nimport { ScaleControl } from 'react-leaflet';\r\nimport Legend from \"./Legend\";\r\n\r\nconst SatteliteMap = ({\r\n  data,\r\n  selectedImageUrl\r\n}) => {\r\n  const location = useGeoLocation();\r\n  const [polygonCoords, setPolygonCoords] = useState([]);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [mapCenter, setMapCenter] = useState([36.806389, 10.181667]);\r\n  const [zoomLevel] = useState(17);\r\n  const mapRef = useRef(null);\r\n  const imageOverlayRef = useRef(null);\r\n  const [bounds, setBounds] = useState(null);\r\n  console.log(data)\r\n  // Initialize map with field data\r\n  useEffect(() => {\r\n    if (data && data.length > 0 && data[0]) {\r\n      const field = data[0];\r\n      const latitude = Number(field.Latitude);\r\n      const longitude = Number(field.Longitude);\r\n      \r\n      // Set marker position\r\n      setMarkers([latitude, longitude]);\r\n      setMapCenter([latitude, longitude]);\r\n      \r\n      // Parse and set polygon coordinates\r\n      try {\r\n        if (field.coordinates) {\r\n          const parsedCoords = JSON.parse(field.coordinates);\r\n          \r\n          // Ensure that parsedCoords is an array of objects like [{Lat: xx, Long: xx}, ...]\r\n          if (Array.isArray(parsedCoords)) {\r\n            const formattedCoords = parsedCoords.map(coord => {\r\n              return [coord.Lat, coord.Long]; // Ensure [Lat, Long] format for Leaflet\r\n            });\r\n            \r\n            setPolygonCoords(formattedCoords); // Set the coordinates state\r\n            calculateImageBounds(formattedCoords); // Calculate the bounds based on the coordinates\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error parsing coordinates:\", e);\r\n      }\r\n    }\r\n  }, [data]);\r\n  \r\n\r\n  // Handle selected image URL changes\r\n  useEffect(() => {\r\n    if (selectedImageUrl && bounds && mapRef.current) {\r\n      // Remove previous overlay if exists\r\n      if (imageOverlayRef.current) {\r\n        imageOverlayRef.current.remove();\r\n      }\r\n      \r\n      // Create new image overlay\r\n      imageOverlayRef.current = L.imageOverlay(selectedImageUrl, bounds, {\r\n        opacity: 0.8,\r\n        interactive: true\r\n      }).addTo(mapRef.current);\r\n      \r\n      // Fit bounds to show the entire image\r\n      mapRef.current.fitBounds(bounds);\r\n    }\r\n    \r\n    return () => {\r\n      if (imageOverlayRef.current) {\r\n        imageOverlayRef.current.remove();\r\n      }\r\n    };\r\n  }, [selectedImageUrl, bounds]);\r\n\r\n  // Calculate bounds from polygon coordinates\r\n// Calculate bounds from polygon coordinates\r\nconst calculateImageBounds = (coordinates) => {\r\n  if (!coordinates || coordinates.length === 0) return;\r\n  \r\n  const lats = coordinates.map(coord => coord[0]);\r\n  const lngs = coordinates.map(coord => coord[1]);\r\n  \r\n  const newBounds = [\r\n    [Math.min(...lats), Math.min(...lngs)], // South West corner\r\n    [Math.max(...lats), Math.max(...lngs)]  // North East corner\r\n  ];\r\n  \r\n  setBounds(newBounds); // Update the bounds state\r\n};\r\n\r\n\r\n  return (\r\n    <div>\r\n      <MapContainer \r\n        ref={mapRef}\r\n        style={{ borderRadius: 20, boxShadow: '1px 1px 10px #bbb', height: 300 }}\r\n        className=\"markercluster-map\"\r\n        zoom={zoomLevel}\r\n        center={mapCenter}\r\n        whenCreated={(map) => {\r\n          mapRef.current = map;\r\n        }}\r\n      >\r\n        <FeatureGroup>\r\n          <ScaleControl position=\"bottomleft\" />\r\n        </FeatureGroup>\r\n        \r\n        <TileLayer\r\n          maxNativeZoom={18}\r\n          maxZoom={20}\r\n          url=\"http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}\"\r\n          subdomains={['mt0', 'mt1', 'mt2', 'mt3']}\r\n        />\r\n        \r\n        <Legend map={mapRef.current} />\r\n        <LeafletGeoCoder />\r\n\r\n        {location.loaded && !location.error && (\r\n          <Marker position={[location.coordinates.lat, location.coordinates.lng]}>\r\n            <Popup>My position</Popup>\r\n          </Marker>\r\n        )}\r\n        \r\n        {markers.length > 0 && data && data[0] && (\r\n          <Marker position={[markers[0], markers[1]]}>\r\n            <Popup>{data[0].title}</Popup>\r\n          </Marker>\r\n        )}\r\n        \r\n        {polygonCoords.length > 0 && (\r\n          <Polygon\r\n            // pathOptions={{ color: '#26A6B7', opacity: 0.5 }}\r\n            positions={polygonCoords}\r\n          />\r\n        )}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SatteliteMap;"],"mappings":"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"},"metadata":{},"sourceType":"module"}