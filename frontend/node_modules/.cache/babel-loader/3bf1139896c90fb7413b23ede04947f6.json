{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\HP\\\\Desktop\\\\SmartFarm app\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport styles from './progress.module.css';\n\nfunction useAnimateValue(value, duration) {\n  var _React$useState = React.useState(value),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      current = _React$useState2[0],\n      setCurrent = _React$useState2[1];\n\n  React.useLayoutEffect(function () {\n    var stepDuration = 1 / 50;\n    var totalSteps = duration / stepDuration;\n    var stepSize = (value - current) / totalSteps;\n    var currentStep = 0;\n    var interval = setInterval(function () {\n      return setCurrent(function (current) {\n        currentStep++;\n\n        if (currentStep >= totalSteps) {\n          clearInterval(interval);\n          return value;\n        }\n\n        return current + stepSize;\n      });\n    }, stepDuration * 1000);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, [value, duration]);\n  return current;\n}\n\nvar AnimatePercentage = /*#__PURE__*/React.memo(function (_ref) {\n  var value = _ref.value,\n      duration = _ref.duration;\n  var v = useAnimateValue(value, duration);\n  return Math.round(v * 100) / 100;\n});\n\nfunction _Progress(_ref2) {\n  var _ref2$progress = _ref2.progress,\n      progress = _ref2$progress === void 0 ? 0 : _ref2$progress,\n      _ref2$strokeWidth = _ref2.strokeWidth,\n      strokeWidth = _ref2$strokeWidth === void 0 ? 4 : _ref2$strokeWidth,\n      _ref2$ballStrokeWidth = _ref2.ballStrokeWidth,\n      ballStrokeWidth = _ref2$ballStrokeWidth === void 0 ? 16 : _ref2$ballStrokeWidth,\n      _ref2$reduction = _ref2.reduction,\n      reduction = _ref2$reduction === void 0 ? 0.25 : _ref2$reduction,\n      _ref2$transitionDurat = _ref2.transitionDuration,\n      transitionDuration = _ref2$transitionDurat === void 0 ? 0.5 : _ref2$transitionDurat,\n      _ref2$transitionTimin = _ref2.transitionTimingFunction,\n      transitionTimingFunction = _ref2$transitionTimin === void 0 ? 'ease' : _ref2$transitionTimin,\n      _ref2$background = _ref2.background,\n      background = _ref2$background === void 0 ? '#dde2e9' : _ref2$background,\n      _ref2$hideBall = _ref2.hideBall,\n      hideBall = _ref2$hideBall === void 0 ? false : _ref2$hideBall,\n      _ref2$hideValue = _ref2.hideValue,\n      hideValue = _ref2$hideValue === void 0 ? false : _ref2$hideValue,\n      _ref2$gradient = _ref2.gradient,\n      gradient = _ref2$gradient === void 0 ? [{\n    stop: 0.0,\n    color: '#00bc9b'\n  }, {\n    stop: 1,\n    color: '#5eaefd'\n  }] : _ref2$gradient,\n      _ref2$subtitle = _ref2.subtitle,\n      subtitle = _ref2$subtitle === void 0 ? \"\" : _ref2$subtitle,\n      style = _ref2.style,\n      className = _ref2.className;\n  progress = Math.round(progress * 100) / 100;\n  var width = 200;\n  var center = width / 2;\n  var height = 200 || center + center * Math.cos(reduction * Math.PI);\n\n  var _React$useState3 = React.useState(function () {\n    return Math.random().toString();\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 1),\n      unique = _React$useState4[0];\n\n  var rotate = 90 + 180 * reduction;\n  var r = center - strokeWidth / 2 - ballStrokeWidth / 2;\n  var circumference = Math.PI * r * 2;\n  var offset = circumference * (100 - progress * (1 - reduction)) / 100;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(className, \" \").concat(styles.progress),\n    style: style\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    viewBox: \"0 0 \".concat(width, \" \").concat(height),\n    className: styles.svg\n  }, /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"gradient\" + unique,\n    x1: \"0%\",\n    y1: \"0%\",\n    x2: \"0%\",\n    y2: \"100%\"\n  }, gradient.map(function (_ref3) {\n    var stop = _ref3.stop,\n        color = _ref3.color;\n    return /*#__PURE__*/React.createElement(\"stop\", {\n      key: stop,\n      offset: stop * 100 + \"%\",\n      stopColor: color\n    });\n  }))), !hideValue && /*#__PURE__*/React.createElement(\"text\", {\n    x: center,\n    y: center,\n    textAnchor: \"middle\",\n    fontSize: \"30\",\n    fill: \"#3c3c3c\"\n  }, progress, \"%\"), /*#__PURE__*/React.createElement(\"text\", {\n    x: center,\n    y: center + 30 * 3 / 4,\n    textAnchor: \"middle\",\n    fill: \"#9c9c9c\"\n  }, subtitle), /*#__PURE__*/React.createElement(\"circle\", {\n    transform: \"rotate(\".concat(rotate, \" \").concat(center, \" \").concat(center, \")\"),\n    id: \"path\",\n    cx: center,\n    cy: center,\n    r: r,\n    strokeWidth: strokeWidth,\n    strokeDasharray: circumference,\n    strokeDashoffset: circumference * reduction,\n    fill: \"none\",\n    stroke: background,\n    strokeLinecap: \"round\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    style: {\n      transition: \"stroke-dashoffset \".concat(transitionDuration, \"s \").concat(transitionTimingFunction)\n    },\n    transform: \"rotate(\".concat(rotate, \" \").concat(center, \" \").concat(center, \")\"),\n    id: \"path\",\n    cx: center,\n    cy: center,\n    r: r,\n    strokeWidth: strokeWidth,\n    strokeDasharray: \"\".concat(circumference),\n    strokeDashoffset: offset,\n    fill: \"none\",\n    stroke: \"url(#gradient\".concat(unique, \")\"),\n    strokeLinecap: \"round\"\n  }), !hideBall && /*#__PURE__*/React.createElement(\"circle\", {\n    style: {\n      transition: \"stroke-dashoffset \".concat(transitionDuration, \"s \").concat(transitionTimingFunction)\n    },\n    transform: \"rotate(\".concat(rotate, \" \").concat(center, \" \").concat(center, \")\"),\n    id: \"path\",\n    cx: center,\n    cy: center,\n    r: r,\n    strokeWidth: ballStrokeWidth,\n    strokeDasharray: \"1 \".concat(circumference),\n    strokeDashoffset: offset,\n    fill: \"none\",\n    stroke: \"url(#gradient\".concat(unique, \")\"),\n    strokeLinecap: \"round\"\n  })));\n}\n\nexport var Progress = /*#__PURE__*/React.memo(_Progress);\nProgress.displayName = \"Progress\";\nexport default Progress;","map":null,"metadata":{},"sourceType":"module"}