{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\professional\\\\2K Media\\\\II.develepment\\\\smart farm\\\\smartFarmOldVPS\\\\frontend\\\\src\\\\views\\\\EditableMap.js\";\n\nimport React, { useEffect } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport 'leaflet-draw/dist/leaflet.draw';\nimport { useMap } from \"react-leaflet\";\nimport \"leaflet-control-geocoder/dist/Control.Geocoder.css\";\nimport \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\nimport LeafletGeoCoder from \"./LeafletGeoCoder\";\n\nvar EditableMap = function EditableMap(_ref) {\n  var sensorsCoords = _ref.sensorsCoords,\n      setCoords = _ref.setCoords,\n      setLayer = _ref.setLayer;\n  useEffect(function () {\n    // Check if sensorsCoords is not empty\n    // if (!sensorsCoords || sensorsCoords.length === 0) return;\n    var firstSensorLat = 36.25142;\n    var firstSensorLon = 10.25514;\n    var firstSensor = []; // Extract the first sensor's coordinates\n\n    if (sensorsCoords && sensorsCoords.length > 0) {\n      firstSensor = sensorsCoords[0];\n    }\n\n    if (Object.keys(firstSensor).length > 0) {\n      firstSensorLat = parseFloat(firstSensor.Latitude);\n      firstSensorLon = parseFloat(firstSensor.Longitude);\n    } // Create a Leaflet map\n\n\n    var map = L.map('map').setView([firstSensorLat, firstSensorLon], 15); // Add a tile layer\n\n    L.tileLayer('http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}', {\n      subdomains: ['mt0', 'mt1', 'mt2', 'mt3']\n    }).addTo(map); // Create an editable feature group\n\n    var editableLayers = new L.FeatureGroup().addTo(map); // Configure the drawing options\n\n    var drawOptions = {\n      position: 'topright',\n      draw: {\n        circle: false,\n        marker: false,\n        polyline: false,\n        polygon: {\n          allowIntersection: false,\n          drawError: {\n            color: 'red',\n            timeout: 1000\n          },\n          shapeOptions: {\n            color: 'blue'\n          }\n        }\n      }\n    }; // Add the Leaflet Draw control\n\n    var drawControl = new L.Control.Draw(drawOptions);\n    map.addControl(drawControl); // Add a marker for the first sensor\n\n    L.marker([firstSensorLat, firstSensorLon]).addTo(map).bindPopup(\"Sensor Location\").openPopup(); // Event handler for layer creation\n\n    map.on(L.Draw.Event.CREATED, function (event) {\n      var layer = event.layer; // Access layer data (e.g., coordinates for polygons)\n\n      var layerData = layer.toGeoJSON(); // Update your application state with the layer data\n      // Your logic to handle the layer data goes here\n\n      var coordinates = [];\n\n      if (layerData.geometry.type === 'Polygon') {\n        coordinates = layerData.geometry.coordinates[0].map(function (coord) {\n          return {\n            Lat: coord[1],\n            Long: coord[0]\n          };\n        });\n      }\n\n      if (coordinates.length > 0) {\n        setLayer(JSON.stringify(coordinates));\n        setCoords({\n          Latitude: coordinates[0].Lat,\n          Longitude: coordinates[0].Long\n        });\n      } // Add the layer to the editableLayers FeatureGroup\n\n\n      editableLayers.addLayer(layer);\n    }); // Add geocoder control\n\n    L.Control.geocoder({\n      defaultMarkGeocode: false\n    }).on(\"markgeocode\", function (e) {\n      console.log(e);\n      var latlng = e.geocode.center;\n      L.marker(latlng).addTo(map).bindPopup(e.geocode.name).openPopup();\n      map.fitBounds(e.geocode.bbox);\n    }).addTo(map); // Cleanup when the component is unmounted\n\n    return function () {\n      map.remove(); // Remove the map instance\n    };\n  }, [sensorsCoords, setCoords, setLayer]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"map\",\n    style: {\n      height: '400px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default EditableMap;","map":{"version":3,"names":["React","useEffect","L","useMap","LeafletGeoCoder","EditableMap","sensorsCoords","setCoords","setLayer","firstSensorLat","firstSensorLon","firstSensor","length","Object","keys","parseFloat","Latitude","Longitude","map","setView","tileLayer","subdomains","addTo","editableLayers","FeatureGroup","drawOptions","position","draw","circle","marker","polyline","polygon","allowIntersection","drawError","color","timeout","shapeOptions","drawControl","Control","Draw","addControl","bindPopup","openPopup","on","Event","CREATED","event","layer","layerData","toGeoJSON","coordinates","geometry","type","coord","Lat","Long","JSON","stringify","addLayer","geocoder","defaultMarkGeocode","e","console","log","latlng","geocode","center","name","fitBounds","bbox","remove","height"],"sources":["C:/professional/2K Media/II.develepment/smart farm/smartFarmOldVPS/frontend/src/views/EditableMap.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport 'leaflet-draw/dist/leaflet.draw';\nimport { useMap } from \"react-leaflet\";\nimport \"leaflet-control-geocoder/dist/Control.Geocoder.css\";\nimport \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\nimport LeafletGeoCoder from \"./LeafletGeoCoder\";\n\nconst EditableMap = ({ sensorsCoords, setCoords, setLayer }) => {\n  useEffect(() => {\n    // Check if sensorsCoords is not empty\n    // if (!sensorsCoords || sensorsCoords.length === 0) return;\n    let firstSensorLat = 36.25142\n    let firstSensorLon = 10.25514\n    let firstSensor = []\n    // Extract the first sensor's coordinates\n    if(sensorsCoords && sensorsCoords.length > 0){\n      firstSensor = sensorsCoords[0];\n\n    }\n    if(Object.keys(firstSensor).length > 0){\n      firstSensorLat = parseFloat(firstSensor.Latitude);\n      firstSensorLon = parseFloat(firstSensor.Longitude);\n      \n    }\n    // Create a Leaflet map\n    const map = L.map('map').setView([firstSensorLat, firstSensorLon], 15);\n\n    // Add a tile layer\n    L.tileLayer('http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}', {\n      subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n    }).addTo(map);\n\n    // Create an editable feature group\n    const editableLayers = new L.FeatureGroup().addTo(map);\n\n    // Configure the drawing options\n    const drawOptions = {\n      position: 'topright',\n      draw: {\n        circle: false,\n        marker: false,\n        polyline: false,\n        polygon: {\n          allowIntersection: false,\n          drawError: {\n            color: 'red',\n            timeout: 1000,\n          },\n          shapeOptions: {\n            color: 'blue',\n          },\n        },\n      },\n    };\n\n    // Add the Leaflet Draw control\n    const drawControl = new L.Control.Draw(drawOptions);\n    map.addControl(drawControl);\n\n    // Add a marker for the first sensor\n    L.marker([firstSensorLat, firstSensorLon])\n      .addTo(map)\n      .bindPopup(\"Sensor Location\")\n      .openPopup();\n\n    // Event handler for layer creation\n    map.on(L.Draw.Event.CREATED, function (event) {\n      const layer = event.layer;\n\n      // Access layer data (e.g., coordinates for polygons)\n      const layerData = layer.toGeoJSON();\n\n      // Update your application state with the layer data\n      // Your logic to handle the layer data goes here\n      let coordinates = [];\n      if (layerData.geometry.type === 'Polygon') {\n        coordinates = layerData.geometry.coordinates[0].map((coord) => ({\n          Lat: coord[1],\n          Long: coord[0],\n        }));\n      }\n      if (coordinates.length > 0) {\n        setLayer(JSON.stringify(coordinates));\n        setCoords({ Latitude: coordinates[0].Lat, Longitude: coordinates[0].Long });\n      }\n\n      // Add the layer to the editableLayers FeatureGroup\n      editableLayers.addLayer(layer);\n    });\n\n    // Add geocoder control\n    L.Control.geocoder({\n      defaultMarkGeocode: false,\n    })\n      .on(\"markgeocode\", function (e) {\n        console.log(e);\n        var latlng = e.geocode.center;\n        L.marker(latlng)\n          .addTo(map)\n          .bindPopup(e.geocode.name)\n          .openPopup();\n        map.fitBounds(e.geocode.bbox);\n      })\n      .addTo(map);\n\n    // Cleanup when the component is unmounted\n    return () => {\n      map.remove(); // Remove the map instance\n    };\n  }, [sensorsCoords, setCoords, setLayer]);\n\n  return <div id=\"map\" style={{ height: '400px' }}></div>;\n};\n\nexport default EditableMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}