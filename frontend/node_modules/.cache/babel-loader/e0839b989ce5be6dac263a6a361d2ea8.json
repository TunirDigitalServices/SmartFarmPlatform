{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\smartFarm\\\\backoffice\\\\frontend\\\\src\\\\views\\\\SatteliteMap.js\";\n\nimport React, { useEffect } from \"react\";\nimport { MapContainer, TileLayer, ImageOverlay } from \"react-leaflet\";\nimport { LatLngBounds } from \"leaflet\"; // for creating bounds if needed\n\nvar SatteliteMap = function SatteliteMap(_ref) {\n  var selectedImageUrl = _ref.selectedImageUrl,\n      drawn = _ref.drawn,\n      zoom = _ref.zoom,\n      center = _ref.center;\n  useEffect(function () {\n    if (!selectedImageUrl || !drawn || !Array.isArray(drawn) || drawn.length === 0) {\n      console.error(\"No valid polygon data or image URL.\");\n      return;\n    }\n\n    var latlngs = drawn; // Assuming `drawn` contains the lat/lngs for the polygon\n    // Check if latlngs is a valid array and contains coordinates\n\n    if (!Array.isArray(latlngs) || latlngs.length === 0) {\n      console.error(\"Invalid latlngs:\", latlngs);\n      return;\n    }\n\n    var bounds = new LatLngBounds(latlngs); // You can now use bounds for your ImageOverlay\n    // Ensure you are setting the bounds correctly when displaying the image\n  }, [selectedImageUrl, drawn]);\n  return /*#__PURE__*/React.createElement(MapContainer, {\n    center: center,\n    zoom: zoom,\n    style: {\n      height: \"400px\",\n      width: \"100%\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TileLayer, {\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }), selectedImageUrl && drawn && /*#__PURE__*/React.createElement(ImageOverlay, {\n    url: selectedImageUrl,\n    bounds: bounds,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default SatteliteMap;","map":{"version":3,"names":["React","useEffect","MapContainer","TileLayer","ImageOverlay","LatLngBounds","SatteliteMap","selectedImageUrl","drawn","zoom","center","Array","isArray","length","console","error","latlngs","bounds","height","width"],"sources":["C:/Users/lenovo/Desktop/smartFarm/backoffice/frontend/src/views/SatteliteMap.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { MapContainer, TileLayer, ImageOverlay } from \"react-leaflet\";\r\nimport { LatLngBounds } from \"leaflet\"; // for creating bounds if needed\r\n\r\nconst SatteliteMap = ({ selectedImageUrl, drawn, zoom, center }) => {\r\n  useEffect(() => {\r\n    if (!selectedImageUrl || !drawn || !Array.isArray(drawn) || drawn.length === 0) {\r\n      console.error(\"No valid polygon data or image URL.\");\r\n      return;\r\n    }\r\n\r\n    const latlngs = drawn; // Assuming `drawn` contains the lat/lngs for the polygon\r\n\r\n    // Check if latlngs is a valid array and contains coordinates\r\n    if (!Array.isArray(latlngs) || latlngs.length === 0) {\r\n      console.error(\"Invalid latlngs:\", latlngs);\r\n      return;\r\n    }\r\n\r\n    const bounds = new LatLngBounds(latlngs);\r\n\r\n    // You can now use bounds for your ImageOverlay\r\n    // Ensure you are setting the bounds correctly when displaying the image\r\n  }, [selectedImageUrl, drawn]);\r\n\r\n  return (\r\n    <MapContainer center={center} zoom={zoom} style={{ height: \"400px\", width: \"100%\" }}>\r\n      <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n      {selectedImageUrl && drawn && (\r\n        <ImageOverlay url={selectedImageUrl} bounds={bounds} />\r\n      )}\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default SatteliteMap;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,YAAlC,QAAsD,eAAtD;AACA,SAASC,YAAT,QAA6B,SAA7B,C,CAAwC;;AAExC,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAA+C;EAAA,IAA5CC,gBAA4C,QAA5CA,gBAA4C;EAAA,IAA1BC,KAA0B,QAA1BA,KAA0B;EAAA,IAAnBC,IAAmB,QAAnBA,IAAmB;EAAA,IAAbC,MAAa,QAAbA,MAAa;EAClET,SAAS,CAAC,YAAM;IACd,IAAI,CAACM,gBAAD,IAAqB,CAACC,KAAtB,IAA+B,CAACG,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAhC,IAAwDA,KAAK,CAACK,MAAN,KAAiB,CAA7E,EAAgF;MAC9EC,OAAO,CAACC,KAAR,CAAc,qCAAd;MACA;IACD;;IAED,IAAMC,OAAO,GAAGR,KAAhB,CANc,CAMS;IAEvB;;IACA,IAAI,CAACG,KAAK,CAACC,OAAN,CAAcI,OAAd,CAAD,IAA2BA,OAAO,CAACH,MAAR,KAAmB,CAAlD,EAAqD;MACnDC,OAAO,CAACC,KAAR,CAAc,kBAAd,EAAkCC,OAAlC;MACA;IACD;;IAED,IAAMC,MAAM,GAAG,IAAIZ,YAAJ,CAAiBW,OAAjB,CAAf,CAdc,CAgBd;IACA;EACD,CAlBQ,EAkBN,CAACT,gBAAD,EAAmBC,KAAnB,CAlBM,CAAT;EAoBA,oBACE,oBAAC,YAAD;IAAc,MAAM,EAAEE,MAAtB;IAA8B,IAAI,EAAED,IAApC;IAA0C,KAAK,EAAE;MAAES,MAAM,EAAE,OAAV;MAAmBC,KAAK,EAAE;IAA1B,CAAjD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,SAAD;IAAW,GAAG,EAAC,oDAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADF,EAEGZ,gBAAgB,IAAIC,KAApB,iBACC,oBAAC,YAAD;IAAc,GAAG,EAAED,gBAAnB;IAAqC,MAAM,EAAEU,MAA7C;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAHJ,CADF;AAQD,CA7BD;;AA+BA,eAAeX,YAAf"},"metadata":{},"sourceType":"module"}