{"ast":null,"code":"import _toConsumableArray from \"/var/www/prod/smartfarm/backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/var/www/prod/smartfarm/backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/var/www/prod/smartfarm/backoffice/frontend/src/views/SatteliteMap.js\";\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { MapContainer, TileLayer, Polygon, Circle, FeatureGroup, Marker, Popup, useMap, ImageOverlay } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./Styles.css\";\nimport useGeoLocation from \"../utils/useGeoLocation\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport api from \"../api/api\";\nimport L from 'leaflet';\nimport MarkerObject from \"./MarkerMap\";\nimport LeafletGeoCoder from \"./LeafletGeoCoder\";\nimport axios from \"axios\";\nimport { Card, CardBody, CardImg, CardTitle, Col, FormSelect, Row } from \"shards-react\";\nimport IrrigationMap from '../images/Irrigation-index.png';\nimport ndvi from '../images/ndvi.png';\nimport NitrogenMap from '../images/Nitrogen-Map.png';\nimport PlantHealthMap from '../images/Plant-Health-gci.png';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport Button from '@mui/material/Button';\nimport SatelliteAltIcon from '@mui/icons-material/SatelliteAlt';\nimport { Box } from \"@mui/material\";\nimport { ScaleControl } from 'react-leaflet';\n\nvar SatteliteMap = function SatteliteMap(_ref) {\n  var data = _ref.data,\n      _onCreated = _ref._onCreated,\n      _onEdited = _ref._onEdited,\n      draw = _ref.draw,\n      edit = _ref.edit,\n      fromAction = _ref.fromAction;\n  var position = [33.8921, 9.5615];\n  var location = useGeoLocation(); //   const map = useMap();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      overlayBounds = _useState2[0],\n      setOverlayBounds = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      drawnPolygon = _useState4[0],\n      setDrawnPolygon = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isRequesting = _useState6[0],\n      setIsRequesting = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectedDesignation = _useState8[0],\n      setSelectedDesignation = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      designationData = _useState10[0],\n      setDesignationData = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      selectedDesignationUrl = _useState12[0],\n      setSelectedDesignationUrl = _useState12[1];\n\n  var _useState13 = useState(null),\n      _useState14 = _slicedToArray(_useState13, 2),\n      Map = _useState14[0],\n      setMap = _useState14[1];\n\n  var designationImageMap = {\n    \"Vegetation index\": ndvi,\n    \"Irrigation index\": IrrigationMap,\n    \"Nitrogen Map\": NitrogenMap,\n    \"Plant Health\": PlantHealthMap\n  };\n\n  var calculateBounds = function calculateBounds(coordinates) {\n    var latitudes = coordinates.map(function (coord) {\n      return coord[1];\n    });\n    var longitudes = coordinates.map(function (coord) {\n      return coord[0];\n    });\n    var bounds = [[Math.min.apply(Math, _toConsumableArray(latitudes)), Math.min.apply(Math, _toConsumableArray(longitudes))], [Math.max.apply(Math, _toConsumableArray(latitudes)), Math.max.apply(Math, _toConsumableArray(longitudes))]];\n    return bounds;\n  };\n\n  var handleCreated = function handleCreated(e) {\n    var type = e.layerType;\n    var layer = e.layer;\n\n    if (type === 'polygon') {\n      var coordinates = layer.getLatLngs()[0].map(function (coord) {\n        return [coord.lng, coord.lat];\n      });\n      setDrawnPolygon(coordinates);\n    }\n  };\n\n  var handleSendRequest = function handleSendRequest() {\n    setIsRequesting(true);\n  };\n\n  var handleCardClick = function handleCardClick(selected) {\n    handleDesignationChange({\n      target: {\n        value: selected\n      }\n    });\n  };\n\n  var handleDesignationChange = function handleDesignationChange(event) {\n    var selected = event.target.value;\n    var url = designationData[0][selected].url;\n    var bounds = calculateBounds(drawnPolygon);\n    setSelectedDesignation(selected);\n    setSelectedDesignationUrl(url);\n    setOverlayBounds(bounds);\n  };\n\n  console.log(selectedDesignationUrl);\n  useEffect(function () {\n    // if (!Map) return\n    if (isRequesting && drawnPolygon) {\n      // Send API request with the drawn polygon data\n      var apiUrl = 'https://app.satellite.robocare.tn/api/service/task/detail/';\n      axios.post(apiUrl, {\n        polygon: drawnPolygon\n      }).then(function (response) {\n        // Handle the API response here\n        console.log('API response:', response.data);\n        var fetchedData = response.data.data.data;\n        var dataArray = [];\n\n        if (fetchedData) {\n          dataArray.push(fetchedData);\n        }\n\n        setDesignationData(dataArray);\n      }).catch(function (error) {\n        // Handle errors\n        console.error('API error:', error);\n      }).finally(function () {\n        setIsRequesting(false);\n      });\n    }\n  }, [isRequesting, drawnPolygon]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MapContainer, {\n    ref: setMap,\n    style: {\n      borderRadius: 20,\n      boxShadow: '1px 1px 10px #bbb',\n      height: 300\n    },\n    className: \"markercluster-map\",\n    center: position,\n    zoom: 15,\n    maxZoom: 18,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FeatureGroup, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(EditControl, {\n    draw: draw,\n    edit: edit,\n    position: \"topright\",\n    onCreated: handleCreated,\n    onEdited: _onEdited,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(ScaleControl, {\n    position: \"bottomleft\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(TileLayer, {\n    url: selectedDesignationUrl || 'http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}',\n    subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(LeafletGeoCoder, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }), location.loaded && !location.error && /*#__PURE__*/React.createElement(Marker, {\n    position: [location.coordinates.lat, location.coordinates.lng],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Popup, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, \"My position\")), selectedDesignationUrl && overlayBounds && /*#__PURE__*/React.createElement(TileLayer, {\n    key: selectedDesignationUrl,\n    url: selectedDesignationUrl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      marginTop: \"20px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    startIcon: /*#__PURE__*/React.createElement(SatelliteAltIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 48\n      }\n    }),\n    onClick: handleSendRequest,\n    disabled: isRequesting,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, isRequesting ? 'Sending Request...' : 'Satellite Images')), isRequesting ? /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      width: '100%',\n      marginTop: \"10px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LinearProgress, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  })) : /*#__PURE__*/React.createElement(Row, {\n    style: {\n      marginTop: \"20px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 10\n    }\n  }, designationData.length > 0 && Object.keys(designationData[0]).map(function (item, indx) {\n    var data = designationData[0][item];\n    return /*#__PURE__*/React.createElement(Col, {\n      lg: \"3\",\n      md: \"6\",\n      sm: \"6\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"m-4 p-0 \",\n      key: indx,\n      style: {\n        width: \"150px\",\n        height: \"100px\",\n        cursor: \"pointer\"\n      },\n      onClick: function onClick() {\n        return handleCardClick(item);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(CardImg, {\n      width: 100,\n      height: 100,\n      top: true,\n      src: designationImageMap[data.designation],\n      alt: item.designation,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(CardBody, {\n      className: \"m-0 p-0\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        fontSize: \"16px\"\n      },\n      className: \"text-center py-2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 19\n      }\n    }, data.designation))));\n  })));\n};\n\nexport default SatteliteMap;","map":{"version":3,"names":["React","useState","useEffect","useRef","MapContainer","TileLayer","Polygon","Circle","FeatureGroup","Marker","Popup","useMap","ImageOverlay","useGeoLocation","EditControl","api","L","MarkerObject","LeafletGeoCoder","axios","Card","CardBody","CardImg","CardTitle","Col","FormSelect","Row","IrrigationMap","ndvi","NitrogenMap","PlantHealthMap","LinearProgress","Button","SatelliteAltIcon","Box","ScaleControl","SatteliteMap","data","_onCreated","_onEdited","draw","edit","fromAction","position","location","overlayBounds","setOverlayBounds","drawnPolygon","setDrawnPolygon","isRequesting","setIsRequesting","selectedDesignation","setSelectedDesignation","designationData","setDesignationData","selectedDesignationUrl","setSelectedDesignationUrl","Map","setMap","designationImageMap","calculateBounds","coordinates","latitudes","map","coord","longitudes","bounds","Math","min","max","handleCreated","e","type","layerType","layer","getLatLngs","lng","lat","handleSendRequest","handleCardClick","selected","handleDesignationChange","target","value","event","url","console","log","apiUrl","post","polygon","then","response","fetchedData","dataArray","push","catch","error","finally","borderRadius","boxShadow","height","loaded","display","justifyContent","marginTop","width","length","Object","keys","item","indx","cursor","designation","fontSize"],"sources":["/var/www/prod/smartfarm/backoffice/frontend/src/views/SatteliteMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { MapContainer, TileLayer, Polygon, Circle, FeatureGroup, Marker, Popup, useMap, ImageOverlay } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./Styles.css\";\nimport useGeoLocation from \"../utils/useGeoLocation\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport api from \"../api/api\";\nimport L from 'leaflet';\nimport MarkerObject from \"./MarkerMap\"\nimport LeafletGeoCoder from \"./LeafletGeoCoder\";\nimport axios from \"axios\";\nimport {  Card, CardBody, CardImg, CardTitle, Col, FormSelect, Row } from \"shards-react\";\nimport IrrigationMap from '../images/Irrigation-index.png'\nimport ndvi from '../images/ndvi.png'\nimport NitrogenMap from '../images/Nitrogen-Map.png'\nimport PlantHealthMap from '../images/Plant-Health-gci.png'\nimport LinearProgress from '@mui/material/LinearProgress';\nimport Button from '@mui/material/Button';\nimport SatelliteAltIcon from '@mui/icons-material/SatelliteAlt';\nimport { Box } from \"@mui/material\";\n\nimport { ScaleControl } from 'react-leaflet' \n\n\n\nconst SatteliteMap = ({ data, _onCreated, _onEdited, draw, edit, fromAction }) => {\n  const position = [33.8921, 9.5615];\n  const location = useGeoLocation();\n  //   const map = useMap();\n  const [overlayBounds, setOverlayBounds] = useState(null);\n  const [drawnPolygon, setDrawnPolygon] = useState(null);\n  const [isRequesting, setIsRequesting] = useState(false);\n  const [selectedDesignation, setSelectedDesignation] = useState('');\n  const [designationData, setDesignationData] = useState([]);\n  const [selectedDesignationUrl, setSelectedDesignationUrl] = useState(null);\n  const [Map, setMap] = useState(null)\n  const designationImageMap = {\n    \"Vegetation index\": ndvi,\n    \"Irrigation index\": IrrigationMap,\n    \"Nitrogen Map\": NitrogenMap,\n    \"Plant Health\": PlantHealthMap,\n  };\n  \n  const calculateBounds = (coordinates) => {\n    const latitudes = coordinates.map(coord => coord[1]);\n    const longitudes = coordinates.map(coord => coord[0]);\n\n    const bounds = [\n      [Math.min(...latitudes), Math.min(...longitudes)],\n      [Math.max(...latitudes), Math.max(...longitudes)]\n    ];\n\n    return bounds;\n  };\n\n\n  const handleCreated = (e) => {\n    const type = e.layerType;\n    const layer = e.layer;\n\n    if (type === 'polygon') {\n      const coordinates = layer.getLatLngs()[0].map(coord => [coord.lng, coord.lat]);\n      setDrawnPolygon(coordinates);\n    }\n  };\n  const handleSendRequest = () => {\n    setIsRequesting(true);\n  };\n  const handleCardClick = (selected) => {\n    handleDesignationChange({ target: { value: selected } });\n  };\n  const handleDesignationChange = (event) => {\n    const selected = event.target.value;\n    const { url } = designationData[0][selected];\n    const bounds = calculateBounds(drawnPolygon);\n    setSelectedDesignation(selected);\n    setSelectedDesignationUrl(url);\n    setOverlayBounds(bounds);\n  };\n\n  console.log(selectedDesignationUrl)\n\n  useEffect(() => {\n    // if (!Map) return\n    if (isRequesting && drawnPolygon) {\n      // Send API request with the drawn polygon data\n      const apiUrl = 'https://app.satellite.robocare.tn/api/service/task/detail/';\n\n      axios.post(apiUrl, { polygon: drawnPolygon })\n        .then((response) => {\n          // Handle the API response here\n          console.log('API response:', response.data);\n          const fetchedData = response.data.data.data\n          let dataArray = []\n          if (fetchedData) {\n            dataArray.push(fetchedData)\n          }\n          setDesignationData(dataArray);\n        })\n        .catch((error) => {\n          // Handle errors\n          console.error('API error:', error);\n        })\n        .finally(() => {\n          setIsRequesting(false);\n        });\n    }\n  }, [isRequesting, drawnPolygon]);\n\n\n  return (\n    <div>\n      <MapContainer ref={setMap}\n        style={{ borderRadius: 20, boxShadow: '1px 1px 10px #bbb', height: 300 }}\n        className=\"markercluster-map\"\n        center={position}\n        zoom={15} \n        maxZoom={18}\n      >\n        <FeatureGroup>\n          <EditControl draw={draw} edit={edit} position=\"topright\" onCreated={handleCreated} onEdited={_onEdited} />\n          <ScaleControl position=\"bottomleft\" />\n\n        </FeatureGroup>\n        <TileLayer\n          url={selectedDesignationUrl || 'http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}'}\n          subdomains={['mt0', 'mt1', 'mt2', 'mt3']}\n        />\n\n        <LeafletGeoCoder />\n\n        {location.loaded && !location.error && (\n          <Marker position={[location.coordinates.lat, location.coordinates.lng]}>\n            <Popup>My position</Popup>\n          </Marker>\n        )}\n        {selectedDesignationUrl && overlayBounds && (\n          <TileLayer\n          key={selectedDesignationUrl}\n            url={selectedDesignationUrl}\n          />\n        )}\n      </MapContainer>\n      <div style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"20px\" }}>\n        <Button  variant=\"outlined\" startIcon={<SatelliteAltIcon />} onClick={handleSendRequest} disabled={isRequesting}>\n          {isRequesting ? 'Sending Request...' : 'Satellite Images'}\n        </Button>\n\n      </div>\n      {\n        isRequesting ?     \n    <Box sx={{ width: '100%', marginTop: \"10px\" }}>\n        <LinearProgress />\n\n    </Box>\n     : \n         <Row style={{marginTop: \"20px\" }}>\n        {designationData.length > 0 &&\n          Object.keys(designationData[0]).map((item, indx) =>{\n            const data = designationData[0][item];\n            return(\n              <Col lg=\"3\" md=\"6\" sm=\"6\" >\n            \n              <Card className=\"m-4 p-0 \" key={indx} style={{ width: \"150px\",height:\"100px\", cursor: \"pointer\" }} onClick={() => handleCardClick(item)}>\n                <CardImg width={100} height={100} top src={designationImageMap[data.designation]} alt={item.designation} />\n                <CardBody className=\"m-0 p-0\">\n                  <h6 style={{fontSize:\"16px\"}} className=\"text-center py-2\">{data.designation}</h6>\n                </CardBody>\n              </Card>\n              </Col>\n           )\n            \n          }\n         )}\n      </Row>\n      }\n    \n    </div>\n  );\n};\n\nexport default SatteliteMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}