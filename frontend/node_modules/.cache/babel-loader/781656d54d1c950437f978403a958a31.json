{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/prod/smartfarm/backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/prod/smartfarm/backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/var/www/prod/smartfarm/backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport api from '../api/api';\n\nvar useSensorData = function useSensorData() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      sensorData = _useState2[0],\n      setSensorData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allDataSensor = _useState4[0],\n      setAllDataSensor = _useState4[1];\n\n  var location = useLocation();\n  var userId = location.pathname.split('/')[2];\n  var userUid = JSON.parse(localStorage.getItem('user')).id;\n  var fieldUid = localStorage.getItem('Field');\n  var url = '/sensor/sensor-update-data';\n\n  if (JSON.parse(localStorage.getItem('user')).role === \"ROLE_SUPPLIER\" && location.pathname === \"/Fields/\".concat(userId, \"/\").concat(fieldUid)) {\n    url = '/supplier/sensor-data';\n  }\n\n  if (JSON.parse(localStorage.getItem('user')).role === \"ROLE_SUPPLIER\" && location.pathname === \"/Dashboard-supplier\") {\n    url = '/supplier/get-sensors-data';\n  }\n\n  var data = {\n    userUid: userUid,\n    fieldUid: fieldUid,\n    userId: userId\n  };\n\n  var getDataSensor = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, sensors, dataMappings, updatedSensorData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return api.post(url, data);\n\n            case 3:\n              response = _context.sent;\n              sensors = response.data.sensors;\n              dataMappings = response.data.dataMapping; // Extract max/min from this\n\n              updatedSensorData = sensors.map(function (sensor) {\n                var valaueAfterMapping = [];\n                var mappedCharge = 0;\n                var date = sensor.time;\n                var vals = [sensor.mv1, sensor.mv2, sensor.mv3];\n\n                if (sensor) {\n                  var chargeMin = 73;\n                  var chargeMax = 100;\n                  mappedCharge = ((Number(sensor.charge) - chargeMin) / (chargeMax - chargeMin) * 100).toFixed(2);\n                  mappedCharge = Math.max(0, Math.min(100, mappedCharge));\n                } // Loop over each value in vals and apply the corresponding max/min\n\n\n                vals.forEach(function (val, index) {\n                  var keyDataMax = \"Mv\".concat(index + 1, \"_max\"); // Correctly select Mv1_max, Mv2_max, or Mv3_max\n\n                  var keyDataMin = \"Mv\".concat(index + 1, \"_min\"); // Correctly select Mv1_min, Mv2_min, or Mv3_min\n                  // Ensure the value falls within the min-max range\n\n                  if (val >= parseFloat(dataMappings.min[keyDataMin]) && val <= parseFloat(dataMappings.max[keyDataMax])) {\n                    valaueAfterMapping[index] = ((parseFloat(val) - dataMappings.min[keyDataMin]) / (dataMappings.max[keyDataMax] - dataMappings.min[keyDataMin]) * 100).toFixed(2);\n                  } else if (val < parseFloat(dataMappings.max[keyDataMax])) {\n                    valaueAfterMapping[index] = 100;\n                  } else if (val > parseFloat(dataMappings.min[keyDataMin])) {\n                    valaueAfterMapping[index] = 0;\n                  }\n                });\n                return {\n                  code: sensor.code,\n                  sensor_id: sensor.sensor_id,\n                  time: sensor.time,\n                  temperature: sensor.temperature,\n                  humidity: sensor.humidity,\n                  pressure: sensor.pressure,\n                  charge: mappedCharge,\n                  signal: sensor.signal,\n                  adc: sensor.adc,\n                  ts: sensor.ts,\n                  mv1: valaueAfterMapping[0],\n                  mv2: valaueAfterMapping[1],\n                  mv3: valaueAfterMapping[2],\n                  originalmv1: sensor.mv1,\n                  originalmv2: sensor.mv2,\n                  originalmv3: sensor.mv3,\n                  altitude: sensor.altitude,\n                  mapping: response.data.dataMapping\n                };\n              });\n              setSensorData(sensors);\n              setAllDataSensor(updatedSensorData);\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 11]]);\n    }));\n\n    return function getDataSensor() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getDataSensor();\n    var intervalId = setInterval(function () {\n      getDataSensor();\n    }, 30000);\n    return function () {\n      return clearInterval(intervalId);\n    };\n  }, []);\n  return allDataSensor;\n};\n\nexport default useSensorData;","map":{"version":3,"names":["React","useEffect","useState","useLocation","api","useSensorData","sensorData","setSensorData","allDataSensor","setAllDataSensor","location","userId","pathname","split","userUid","JSON","parse","localStorage","getItem","id","fieldUid","url","role","data","getDataSensor","post","response","sensors","dataMappings","dataMapping","updatedSensorData","map","sensor","valaueAfterMapping","mappedCharge","date","time","vals","mv1","mv2","mv3","chargeMin","chargeMax","Number","charge","toFixed","Math","max","min","forEach","val","index","keyDataMax","keyDataMin","parseFloat","code","sensor_id","temperature","humidity","pressure","signal","adc","ts","originalmv1","originalmv2","originalmv3","altitude","mapping","console","log","intervalId","setInterval","clearInterval"],"sources":["/var/www/prod/smartfarm/backoffice/frontend/src/utils/useSensorData.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport api from '../api/api';\n\nconst useSensorData = () => {\n  const [sensorData, setSensorData] = useState([]);\n  const [allDataSensor, setAllDataSensor] = useState([]);\n  let location = useLocation();\n  let userId = location.pathname.split('/')[2];\n  let userUid = JSON.parse(localStorage.getItem('user')).id;\n  let fieldUid = localStorage.getItem('Field');\n  let url = '/sensor/sensor-update-data';\n\n  if ((JSON.parse(localStorage.getItem('user')).role === \"ROLE_SUPPLIER\") && location.pathname === `/Fields/${userId}/${fieldUid}`) {\n    url = '/supplier/sensor-data';\n  }\n\n  if ((JSON.parse(localStorage.getItem('user')).role === \"ROLE_SUPPLIER\") && location.pathname === `/Dashboard-supplier`) {\n    url = '/supplier/get-sensors-data';\n  }\n\n  let data = {\n    userUid: userUid,\n    fieldUid: fieldUid,\n    userId: userId,\n  };\n\n  const getDataSensor = async () => {\n    try {\n      const response = await api.post(url, data);\n      const sensors = response.data.sensors;\n      const dataMappings = response.data.dataMapping; // Extract max/min from this\n\n      const updatedSensorData = sensors.map(sensor => {\n        const valaueAfterMapping = [];\n        let mappedCharge = 0;\n        const date = sensor.time;\n        const vals = [sensor.mv1, sensor.mv2, sensor.mv3];\n\n        if (sensor) {\n          const chargeMin = 73;\n          const chargeMax = 100;\n\n          mappedCharge = ((Number(sensor.charge) - chargeMin) / (chargeMax - chargeMin) * 100).toFixed(2);\n          mappedCharge = Math.max(0, Math.min(100, mappedCharge));\n        }\n\n        // Loop over each value in vals and apply the corresponding max/min\n        vals.forEach((val, index) => {\n          const keyDataMax = `Mv${index + 1}_max`; // Correctly select Mv1_max, Mv2_max, or Mv3_max\n          const keyDataMin = `Mv${index + 1}_min`; // Correctly select Mv1_min, Mv2_min, or Mv3_min\n\n          // Ensure the value falls within the min-max range\n          if (val >= parseFloat(dataMappings.min[keyDataMin]) && val <= parseFloat(dataMappings.max[keyDataMax])) {\n            valaueAfterMapping[index] = (((parseFloat(val) - dataMappings.min[keyDataMin]) / (dataMappings.max[keyDataMax] - dataMappings.min[keyDataMin])) * 100).toFixed(2);\n          } else if (val < parseFloat(dataMappings.max[keyDataMax])) {\n            valaueAfterMapping[index] = 100;\n          } else if (val > parseFloat(dataMappings.min[keyDataMin])) {\n            valaueAfterMapping[index] = 0;\n          }\n        });\n\n        return {\n          code: sensor.code,\n          sensor_id: sensor.sensor_id,\n          time: sensor.time,\n          temperature: sensor.temperature,\n          humidity: sensor.humidity,\n          pressure: sensor.pressure,\n          charge: mappedCharge,\n          signal: sensor.signal,\n          adc: sensor.adc,\n          ts: sensor.ts,\n          mv1: valaueAfterMapping[0],\n          mv2: valaueAfterMapping[1],\n          mv3: valaueAfterMapping[2],\n          originalmv1: sensor.mv1,\n          originalmv2: sensor.mv2,\n          originalmv3: sensor.mv3,\n          altitude: sensor.altitude,\n          mapping: response.data.dataMapping,\n        };\n      });\n\n      setSensorData(sensors);\n      setAllDataSensor(updatedSensorData);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getDataSensor();\n\n    const intervalId = setInterval(() => {\n      getDataSensor();\n    }, 30000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  return allDataSensor;\n};\n\nexport default useSensorData;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}