{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/prod/smartfarm/backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/prod/smartfarm/backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/var/www/prod/smartfarm/backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport api from '../api/api';\n\nvar useSensorData = function useSensorData(url) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      sensorData = _useState2[0],\n      setSensorData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allDataSensor = _useState4[0],\n      setAllDataSensor = _useState4[1];\n\n  var userUid = JSON.parse(localStorage.getItem('user')).id;\n  var data = {\n    userUid: userUid\n  };\n\n  var getDataSensor = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return api.post(url, data).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n                  var dataSensor, allDataSensor;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          dataSensor = response.data.sensors;\n                          allDataSensor = [];\n                          _context.next = 4;\n                          return dataSensor.map(function (item) {\n                            var sensorsData = item.sensorsData;\n\n                            if (sensorsData.length > 0) {\n                              var maxDataSensor;\n\n                              for (var i = 0; i < sensorsData.length; i++) {\n                                if (maxDataSensor == null || parseInt(sensorsData[i]['id']) > parseInt(maxDataSensor['id'])) maxDataSensor = sensorsData[i];\n                              } //  let maxDataSensor =  getMax(sensorsData,\"id\")\n\n\n                              [maxDataSensor].map(function (data) {\n                                allDataSensor.push({\n                                  id: data.id,\n                                  code: data.code,\n                                  uid: data.uid,\n                                  time: data.time,\n                                  temperature: data.temperature,\n                                  humidity: data.humidity,\n                                  pressure: data.pressure,\n                                  charge: data.charge,\n                                  adc: data.adc,\n                                  ts: data.ts,\n                                  mv1: data.mv1,\n                                  mv2: data.mv2,\n                                  mv3: data.mv3,\n                                  altitude: data.altitude\n                                });\n                              });\n                            }\n                          });\n\n                        case 4:\n                          setSensorData(dataSensor);\n                          setAllDataSensor(allDataSensor);\n\n                        case 6:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()).catch(function (error) {\n                console.log(error);\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getDataSensor() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getDataSensor();\n    /*setInterval(async () => {\n     if (url) {\n       await getDataSensor()\n     }\n    }, 30000);*/\n  }, []);\n  return allDataSensor;\n};\n\nexport default useSensorData;","map":{"version":3,"names":["React","useEffect","useState","api","useSensorData","url","sensorData","setSensorData","allDataSensor","setAllDataSensor","userUid","JSON","parse","localStorage","getItem","id","data","getDataSensor","post","then","response","dataSensor","sensors","map","item","sensorsData","length","maxDataSensor","i","parseInt","push","code","uid","time","temperature","humidity","pressure","charge","adc","ts","mv1","mv2","mv3","altitude","catch","error","console","log"],"sources":["/var/www/prod/smartfarm/backoffice/frontend/src/utils/useSensorData.js"],"sourcesContent":["import React ,{useEffect,useState} from 'react'\nimport api from '../api/api'\n\n\n\nconst useSensorData = (url) => {\n    const [sensorData, setSensorData] = useState([]);\n    const [allDataSensor, setAllDataSensor] = useState([]);\n\n    let userUid = JSON.parse(localStorage.getItem('user')).id\n\n\n    let data = {\n        userUid : userUid\n      }\n      const getDataSensor = async () => {\n         await api.post(url,data)\n          .then(async response=>{\n            let dataSensor = response.data.sensors\n                let allDataSensor = [];\n                await dataSensor.map(item => {\n                  let sensorsData = item.sensorsData\n                  if(sensorsData.length > 0){\n                    let maxDataSensor;\n                    for (let i=0 ; i<sensorsData.length ; i++) {\n                        if (maxDataSensor == null || parseInt(sensorsData[i]['id']) > parseInt(maxDataSensor['id']))\n                        maxDataSensor = sensorsData[i];\n                    }\n                  //  let maxDataSensor =  getMax(sensorsData,\"id\")\n                   [maxDataSensor].map(data => {\n                      allDataSensor.push({\n                        id : data.id,\n                      code: data.code,\n                      uid : data.uid,\n                      time :data.time,\n                      temperature :data.temperature,\n                      humidity :data.humidity,\n                      pressure :data.pressure,\n                      charge :data.charge,\n                      adc :data.adc,\n                      ts :data.ts,\n                      mv1 : data.mv1,\n                      mv2 : data.mv2,\n                      mv3 :data.mv3,\n                      altitude :data.altitude\n                    });\n                    })\n                  }\n                });\n                setSensorData(dataSensor)\n                setAllDataSensor(allDataSensor)\n          }).catch(error=>{\n            console.log(error)\n          })\n\n      }\n  useEffect(()=>{\n     getDataSensor();\n     \n     /*setInterval(async () => {\n      if (url) {\n        await getDataSensor()\n      }\n    }, 30000);*/\n  },[])\nreturn allDataSensor\n\n\n}\n\nexport default useSensorData"],"mappings":"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"},"metadata":{},"sourceType":"module"}