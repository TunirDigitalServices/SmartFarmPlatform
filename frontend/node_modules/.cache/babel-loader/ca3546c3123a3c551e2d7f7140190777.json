{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Restored Files\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Restored Files\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Restored Files\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Restored Files\\\\backoffice\\\\frontend\\\\src\\\\views\\\\Sensors.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Row, Col, FormInput, Button, Card, CardBody } from \"shards-react\";\nimport { FormSelect } from \"shards-react\";\nimport \"./../assets/Styles.css\";\nimport PageTitle from \"../components/common/PageTitle\";\nimport DBSensor from \"./Sensor\";\nimport api from '../api/api';\nimport { useTranslation } from \"react-i18next\";\nimport LoadingSpinner from \"../components/common/LoadingSpinner\";\nimport drop from '../images/drop.png';\nimport drop1 from '../images/drop1.png';\nimport drop2 from '../images/drop2.png';\nimport temp from '../images/temp.png';\nimport humidity from '../images/humidity.png';\nimport press from '../images/press.png';\nimport useSensorData from \"../utils/useSensorData\";\nimport moment from \"moment\";\nimport { useHistory, useLocation, useParams } from \"react-router-dom\";\nimport SmallStatsFields from \"../components/common/SmallStatsFields\";\nexport default function Sensors() {\n  var _this = this;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t,\n      i18n = _useTranslation.i18n;\n\n  var history = useHistory();\n  var location = useLocation();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      dataSensors = _useState2[0],\n      setDataSensors = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dataFields = _useState4[0],\n      setDataFields = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      dataCrops = _useState6[0],\n      setDataCrops = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      fields = _useState8[0],\n      setFields = _useState8[1];\n\n  var _useState9 = useState(location.pathname.split('/')[2]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      searchCode = _useState10[0],\n      setSearchCode = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      searchField = _useState12[0],\n      setSearchField = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      searchState = _useState14[0],\n      setSearchState = _useState14[1];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      sensorData = _useState16[0],\n      setSensorData = _useState16[1];\n\n  var _useState17 = useState(''),\n      _useState18 = _slicedToArray(_useState17, 2),\n      readingtime = _useState18[0],\n      setReadingTime = _useState18[1];\n\n  var _useState19 = useState(\"\"),\n      _useState20 = _slicedToArray(_useState19, 2),\n      batteryLevel = _useState20[0],\n      setBatteryLevel = _useState20[1];\n\n  var _useState21 = useState(true),\n      _useState22 = _slicedToArray(_useState21, 2),\n      isLoading = _useState22[0],\n      setIsLoading = _useState22[1];\n\n  var _useState23 = useState([]),\n      _useState24 = _slicedToArray(_useState23, 2),\n      crops = _useState24[0],\n      setCrops = _useState24[1];\n\n  var _useState25 = useState({\n    id: '',\n    code: '',\n    time: '',\n    charge: '',\n    signal: '',\n    temp: '',\n    humidity: '',\n    pressure: '',\n    humidityMV1: '',\n    humidityMV2: '',\n    humidityMV3: ''\n  }),\n      _useState26 = _slicedToArray(_useState25, 2),\n      dataSensor = _useState26[0],\n      setDataSensor = _useState26[1];\n\n  var fetchDataSensors = function fetchDataSensors() {\n    api.get(\"/sensor/sensors\").then(function (response) {\n      var sensorData = response.data;\n      setTimeout(function () {\n        setDataSensors(sensorData);\n\n        if (sensorData.length > 0) {\n          var sensorCode = location.pathname.split('/')[2];\n          setSearchCode(sensorCode);\n        }\n      }, 2600);\n    }).catch(function (error) {\n      console.log(error);\n    }).finally(function () {\n      return setIsLoading(false);\n    });\n  };\n\n  var fetchDataFields = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return api.get(\"/field/fields\").then(function (response) {\n                var fieldData = response.data.farms;\n                setDataFields(fieldData);\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchDataFields() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var sensorsData = useSensorData('/sensor/sensor-update-data');\n  useEffect(function () {\n    fetchDataSensors();\n    fetchDataFields();\n  }, []);\n\n  var getFields = function getFields() {\n    var Field = [];\n    dataFields.map(function (farm) {\n      var fields = farm.fields;\n\n      if (fields) {\n        fields.map(function (field) {\n          Field.push({\n            name: field.name,\n            id: field.id,\n            uid: field.uid,\n            sensors: field.sensors\n          });\n        });\n      }\n    });\n    setFields(Field);\n  };\n\n  useEffect(function () {\n    getFields();\n  }, [dataFields]); // useEffect(()=>{\n  //   sensorsData.map(data=>{\n  //     if(data){\n  //       setDataSensor({\n  //         code : data.code,\n  //         time : data.time,\n  //         charge :data.charge,\n  //         temp : data.temperature,\n  //         humidity : data.humidity,\n  //         pressure: data.pressure / 1000,\n  //         humidityMV1 : data.mv1,\n  //         humidityMV2 : data.mv2,\n  //         humidityMV3 : data.mv3\n  //       })\n  //     }\n  //   })\n  // },[sensorsData,searchCode])\n\n  useEffect(function () {\n    // Filter sensorsData based on searchCode\n    var filteredData = sensorsData.filter(function (data) {\n      return data.code === searchCode;\n    }); // Update sensorData state with the filtered data\n\n    if (filteredData.length > 0) {\n      setDataSensor({\n        id: filteredData[0].sensor_id,\n        code: filteredData[0].code,\n        time: filteredData[0].time,\n        charge: filteredData[0].charge,\n        signal: filteredData[0].signal,\n        temp: filteredData[0].temperature,\n        humidity: filteredData[0].humidity,\n        pressure: filteredData[0].pressure / 1000,\n        humidityMV1: filteredData[0].mv1,\n        humidityMV2: filteredData[0].mv2,\n        humidityMV3: filteredData[0].mv3\n      });\n    } else {\n      // If no matching data, reset the sensorData state\n      setDataSensor({\n        id: '',\n        code: '',\n        time: '',\n        charge: '',\n        temp: '',\n        humidity: '',\n        pressure: '',\n        humidityMV1: '',\n        humidityMV2: '',\n        humidityMV3: ''\n      });\n    }\n  }, [sensorsData, searchCode]);\n\n  var _useState27 = useState(\"\"),\n      _useState28 = _slicedToArray(_useState27, 2),\n      mappingMv1 = _useState28[0],\n      setMappingMv1 = _useState28[1];\n\n  var _useState29 = useState(\"\"),\n      _useState30 = _slicedToArray(_useState29, 2),\n      mappingMv2 = _useState30[0],\n      setMappingMv2 = _useState30[1];\n\n  var _useState31 = useState(\"\"),\n      _useState32 = _slicedToArray(_useState31, 2),\n      mappingMv3 = _useState32[0],\n      setMappingMv3 = _useState32[1]; //   const mappingMv = async (date, idSensor, vals) => {\n  //     setMappingMv1(sensorsData[0].mv1)\n  //     setMappingMv2(sensorsData[0].mv2)\n  //     setMappingMv3(sensorsData[0].mv3)\n  //     let result = (Number(sensorsData[0].mv1) +  Number(sensorsData[0].mv2) + Number(sensorsData[0].mv3)) / 3\n  //     let stateCourbe = 'Critical';\n  //     // A voir avec bechir les status \n  //     if(result > 80){\n  //       stateCourbe = 'Full';\n  //     }\n  //     if(result < 80 && result > 40){\n  //       stateCourbe = 'Optimal';\n  //     }\n  //     // setFS({resultState : result, state : stateCourbe})\n  // }\n\n\n  var smallStats3 = [{\n    state: \"20 cm (%)\",\n    icon: /*#__PURE__*/React.createElement(\"img\", {\n      style: {\n        color: \"#F6BE47\"\n      },\n      src: drop,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }\n    }),\n    label: dataSensor.humidityMV1,\n    chartLabels: [null, null, null, null, null, null, null],\n    attrs: {\n      md: \"4\",\n      sm: \"6\"\n    },\n    datasets: [{\n      label: \"Today\",\n      fill: \"start\",\n      borderWidth: 1.5,\n      backgroundColor: \"rgba(255,180,0,0.1)\",\n      borderColor: \"rgb(255,180,0)\",\n      data: []\n    }]\n  }, {\n    state: \"40 cm (%)\",\n    icon: /*#__PURE__*/React.createElement(\"img\", {\n      src: drop2,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }\n    }),\n    label: dataSensor.humidityMV2,\n    chartLabels: [null, null, null, null, null, null, null],\n    attrs: {\n      md: \"4\",\n      sm: \"6\"\n    },\n    datasets: [{\n      label: \"Today\",\n      fill: \"start\",\n      borderWidth: 1.5,\n      backgroundColor: \"rgba(255,180,0,0.1)\",\n      borderColor: \"rgb(255,180,0)\",\n      data: []\n    }]\n  }, {\n    state: \"60 cm (%)\",\n    icon: /*#__PURE__*/React.createElement(\"img\", {\n      src: drop1,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }\n    }),\n    label: dataSensor.humidityMV3,\n    chartLabels: [null, null, null, null, null, null, null],\n    attrs: {\n      md: \"4\",\n      sm: \"6\"\n    },\n    datasets: [{\n      label: \"Today\",\n      fill: \"start\",\n      borderWidth: 1.5,\n      backgroundColor: \"rgba(255,180,0,0.1)\",\n      borderColor: \"rgb(255,180,0)\",\n      data: []\n    }]\n  }];\n  var smallStats4 = [{\n    state: \"\".concat(t('Temp.'), \" (\\xB0C)\"),\n    icon: /*#__PURE__*/React.createElement(\"img\", {\n      src: temp,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }\n    }),\n    label: dataSensor.temp,\n    chartLabels: [null, null, null, null, null, null, null],\n    attrs: {\n      md: \"4\",\n      sm: \"6\"\n    },\n    datasets: [{\n      label: \"Today\",\n      fill: \"start\",\n      borderWidth: 1.5,\n      backgroundColor: \"rgba(255,180,0,0.1)\",\n      borderColor: \"rgb(255,180,0)\",\n      data: []\n    }]\n  }, {\n    state: \"\".concat(t('Humidity'), \" (%)\"),\n    icon: /*#__PURE__*/React.createElement(\"img\", {\n      src: humidity,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 13\n      }\n    }),\n    label: dataSensor.humidity,\n    chartLabels: [null, null, null, null, null, null, null],\n    attrs: {\n      md: \"4\",\n      sm: \"6\"\n    },\n    datasets: [{\n      label: \"Today\",\n      fill: \"start\",\n      borderWidth: 1.5,\n      backgroundColor: \"rgba(255,180,0,0.1)\",\n      borderColor: \"rgb(255,180,0)\",\n      data: []\n    }]\n  }, {\n    state: \"\".concat(t('Pression'), \" (kPa)\"),\n    icon: /*#__PURE__*/React.createElement(\"img\", {\n      src: press,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 13\n      }\n    }),\n    label: dataSensor.pressure ? parseFloat(dataSensor.pressure).toFixed(2) : \"\",\n    chartLabels: [null, null, null, null, null, null, null],\n    attrs: {\n      md: \"4\",\n      sm: \"6\"\n    },\n    datasets: [{\n      label: \"Today\",\n      fill: \"start\",\n      borderWidth: 1.5,\n      backgroundColor: \"rgba(255,180,0,0.1)\",\n      borderColor: \"rgb(255,180,0)\",\n      data: []\n    }]\n  }];\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    className: \"main-content-container px-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    noGutters: true,\n    className: \"page-header d-flex justify-content-between align-items-center  py-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PageTitle, {\n    sm: \"4\",\n    title: t('sensors'),\n    subtitle: t('overview'),\n    className: \"text-sm-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Row, {\n    noGutters: true,\n    className: \"page-header py-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }\n  }, fields.map(function (field) {\n    var matchingSensors = field.sensors.filter(function (sensor) {\n      return sensor.field_id === field.id && sensor.code === dataSensor.code;\n    });\n    var fieldNames = matchingSensors.map(function (sensor) {\n      return field.name;\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 13\n      }\n    }, fieldNames.map(function (fieldName) {\n      return /*#__PURE__*/React.createElement(\"h4\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 19\n        }\n      }, t('fields'), \" : \", fieldName);\n    }));\n  })), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: \"6\",\n    md: \"6\",\n    sm: \"6\",\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 13\n    }\n  }, t('sensor_stats_air')), /*#__PURE__*/React.createElement(Card, {\n    small: true,\n    className: \"stats-small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    className: \"p-0 d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      flexWrap: \"wrap\",\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 19\n    }\n  }, smallStats4.map(function (stats, idx) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SmallStatsFields // ToSensorPage={ToSensorPage}\n    , {\n      style: {\n        borderColor: \"blue\",\n        borderWidth: 2,\n        borderStyle: \"solid\"\n      },\n      id: \"small-stats-\".concat(idx),\n      variation: \"1\" // chartData={stats.datasets}\n      // chartLabels={stats.chartLabels}\n      ,\n      label: stats.label,\n      value: stats.value,\n      icon: stats.icon,\n      state: stats.state,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 25\n      }\n    }), idx != 2 ? /*#__PURE__*/React.createElement(\"hr\", {\n      style: {\n        backgroundColor: \"#ebebeb\",\n        width: \"1px\",\n        height: \"75%\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 27\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null));\n  }))))), /*#__PURE__*/React.createElement(Col, {\n    lg: \"6\",\n    md: \"6\",\n    sm: \"6\",\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 13\n    }\n  }, t('sensor_stats_soil')), /*#__PURE__*/React.createElement(Card, {\n    small: true,\n    className: \"stats-small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    className: \"p-0 d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      flexWrap: \"wrap\",\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 17\n    }\n  }, smallStats3.map(function (stats, idx) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SmallStatsFields // ToSensorPage={ToSensorPage}\n    , {\n      style: {\n        borderColor: \"blue\",\n        borderWidth: 2,\n        borderStyle: \"solid\"\n      },\n      id: \"small-stats-\".concat(idx),\n      variation: \"1\" // chartData={stats.datasets}\n      // chartLabels={stats.chartLabels}\n      ,\n      label: stats.label,\n      value: stats.value,\n      icon: stats.icon,\n      state: stats.state,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 23\n      }\n    }), idx != 2 ? /*#__PURE__*/React.createElement(\"hr\", {\n      style: {\n        backgroundColor: \"#ebebeb\",\n        width: \"1px\",\n        height: \"75%\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 25\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null));\n  })))))), isLoading ? /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DBSensor, {\n    filteredSensors: dataSensor,\n    chargeLevel: batteryLevel,\n    readingtime: readingtime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 15\n    }\n  })));\n}","map":{"version":3,"names":["React","useEffect","useState","Container","Row","Col","FormInput","Button","Card","CardBody","FormSelect","PageTitle","DBSensor","api","useTranslation","LoadingSpinner","drop","drop1","drop2","temp","humidity","press","useSensorData","moment","useHistory","useLocation","useParams","SmallStatsFields","Sensors","t","i18n","history","location","dataSensors","setDataSensors","dataFields","setDataFields","dataCrops","setDataCrops","fields","setFields","pathname","split","searchCode","setSearchCode","searchField","setSearchField","searchState","setSearchState","sensorData","setSensorData","readingtime","setReadingTime","batteryLevel","setBatteryLevel","isLoading","setIsLoading","crops","setCrops","id","code","time","charge","signal","pressure","humidityMV1","humidityMV2","humidityMV3","dataSensor","setDataSensor","fetchDataSensors","get","then","response","data","setTimeout","length","sensorCode","catch","error","console","log","finally","fetchDataFields","fieldData","farms","sensorsData","getFields","Field","map","farm","field","push","name","uid","sensors","filteredData","filter","sensor_id","temperature","mv1","mv2","mv3","mappingMv1","setMappingMv1","mappingMv2","setMappingMv2","mappingMv3","setMappingMv3","smallStats3","state","icon","color","label","chartLabels","attrs","md","sm","datasets","fill","borderWidth","backgroundColor","borderColor","smallStats4","parseFloat","toFixed","matchingSensors","sensor","field_id","fieldNames","fieldName","margin","display","flexDirection","flexWrap","width","stats","idx","borderStyle","value","height"],"sources":["C:/Restored Files/backoffice/frontend/src/views/Sensors.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Container, Row, Col, FormInput,Button,Card,CardBody } from \"shards-react\";\r\nimport { FormSelect } from \"shards-react\";\r\nimport \"./../assets/Styles.css\";\r\nimport PageTitle from \"../components/common/PageTitle\";\r\nimport DBSensor from \"./Sensor\";\r\nimport api from '../api/api';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport LoadingSpinner from \"../components/common/LoadingSpinner\";\r\nimport drop from '../images/drop.png'\r\nimport drop1 from '../images/drop1.png'\r\nimport drop2 from '../images/drop2.png'\r\nimport temp from '../images/temp.png'\r\nimport humidity from '../images/humidity.png'\r\nimport press from '../images/press.png'\r\nimport useSensorData from \"../utils/useSensorData\";\r\nimport moment from \"moment\";\r\nimport { useHistory, useLocation, useParams } from \"react-router-dom\";\r\nimport SmallStatsFields from \"../components/common/SmallStatsFields\";\r\n\r\nexport default function Sensors() {\r\n  const { t, i18n } = useTranslation();\r\n  const history = useHistory()\r\n  const location = useLocation()\r\n  const [dataSensors, setDataSensors] = useState([]);\r\n  const [dataFields, setDataFields] = useState([]);\r\n  const [dataCrops, setDataCrops] = useState([]);\r\n  const [fields, setFields] = useState([]);\r\n  const [searchCode, setSearchCode] = useState(location.pathname.split('/')[2])\r\n  const [searchField, setSearchField] = useState('')\r\n  const [searchState, setSearchState] = useState('')\r\n  const [sensorData, setSensorData] = useState([]);\r\n  const [readingtime,setReadingTime] = useState('')\r\n  const [batteryLevel, setBatteryLevel] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [crops , setCrops] = useState([])\r\n  const [dataSensor,setDataSensor] = useState({\r\n    id:'',\r\n    code :'',\r\n    time :'' ,\r\n    charge :'',\r\n    signal :'',\r\n    temp : '',\r\n    humidity :'',\r\n    pressure :'',\r\n    humidityMV1 :'',\r\n    humidityMV2 :'',\r\n    humidityMV3 :'' \r\n  })\r\n  const fetchDataSensors =  () => {\r\n    api.get(`/sensor/sensors`)\r\n      .then(response => {\r\n        let sensorData = response.data;\r\n        setTimeout(()=>{\r\n          setDataSensors(sensorData);\r\n          if(sensorData.length > 0 ){\r\n            let sensorCode = location.pathname.split('/')[2]\r\n            setSearchCode(sensorCode)\r\n          }\r\n        },2600)\r\n      }).catch(error=>{\r\n        console.log(error)\r\n      }).finally(() => setIsLoading(false))\r\n  };\r\n  const fetchDataFields = async () => {\r\n    await api.get(`/field/fields`)\r\n      .then(response => {\r\n        let fieldData = response.data.farms;\r\n        setDataFields(fieldData);\r\n      })\r\n  };\r\n\r\n  let sensorsData = useSensorData('/sensor/sensor-update-data')  \r\n\r\n  useEffect(() => {\r\n    fetchDataSensors();\r\n    fetchDataFields()\r\n  }, []);\r\n\r\n  const getFields = () => {\r\n    let Field = [];\r\n    dataFields.map(farm => {\r\n      let fields = farm.fields;\r\n      if (fields) {\r\n        fields.map(field => {\r\n          Field.push({\r\n            name: field.name,\r\n            id: field.id,\r\n            uid: field.uid,\r\n            sensors : field.sensors,\r\n          })\r\n        })\r\n      }\r\n    })\r\n    setFields(Field)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getFields()\r\n  }, [dataFields])\r\n\r\n  // useEffect(()=>{\r\n  //   sensorsData.map(data=>{\r\n  //     if(data){\r\n  //       setDataSensor({\r\n  //         code : data.code,\r\n  //         time : data.time,\r\n  //         charge :data.charge,\r\n  //         temp : data.temperature,\r\n  //         humidity : data.humidity,\r\n  //         pressure: data.pressure / 1000,\r\n  //         humidityMV1 : data.mv1,\r\n  //         humidityMV2 : data.mv2,\r\n  //         humidityMV3 : data.mv3\r\n\r\n  //       })\r\n  //     }\r\n  //   })\r\n  // },[sensorsData,searchCode])\r\n\r\n  useEffect(() => {\r\n    // Filter sensorsData based on searchCode\r\n    const filteredData = sensorsData.filter(data => data.code === searchCode);\r\n    \r\n    // Update sensorData state with the filtered data\r\n    if (filteredData.length > 0) {\r\n      setDataSensor({\r\n        id :filteredData[0].sensor_id,\r\n        code: filteredData[0].code,\r\n        time: filteredData[0].time,\r\n        charge: filteredData[0].charge,\r\n        signal: filteredData[0].signal,\r\n        temp: filteredData[0].temperature,\r\n        humidity: filteredData[0].humidity,\r\n        pressure: filteredData[0].pressure / 1000,\r\n        humidityMV1: filteredData[0].mv1,\r\n        humidityMV2: filteredData[0].mv2,\r\n        humidityMV3: filteredData[0].mv3\r\n      });\r\n    } else {\r\n      // If no matching data, reset the sensorData state\r\n      setDataSensor({\r\n        id :'',\r\n        code: '',\r\n        time: '',\r\n        charge: '',\r\n        temp: '',\r\n        humidity: '',\r\n        pressure: '',\r\n        humidityMV1: '',\r\n        humidityMV2: '',\r\n        humidityMV3: ''\r\n      });\r\n    }\r\n  }, [sensorsData, searchCode]);\r\n\r\n  const [mappingMv1,setMappingMv1] = useState(\"\")\r\n  const [mappingMv2,setMappingMv2] = useState(\"\")\r\n  const [mappingMv3,setMappingMv3] = useState(\"\")\r\n  \r\n//   const mappingMv = async (date, idSensor, vals) => {\r\n//     setMappingMv1(sensorsData[0].mv1)\r\n//     setMappingMv2(sensorsData[0].mv2)\r\n//     setMappingMv3(sensorsData[0].mv3)\r\n\r\n//     let result = (Number(sensorsData[0].mv1) +  Number(sensorsData[0].mv2) + Number(sensorsData[0].mv3)) / 3\r\n//     let stateCourbe = 'Critical';\r\n//     // A voir avec bechir les status \r\n//     if(result > 80){\r\n//       stateCourbe = 'Full';\r\n//     }\r\n//     if(result < 80 && result > 40){\r\n//       stateCourbe = 'Optimal';\r\n//     }\r\n    \r\n//     // setFS({resultState : result, state : stateCourbe})\r\n// }\r\n\r\n  let smallStats3 = [\r\n    {\r\n      state: `20 cm (%)`,\r\n      icon: <img style={{color:\"#F6BE47\"}} src={drop} alt=\"\" />,\r\n      label: dataSensor.humidityMV1,\r\n      chartLabels: [null, null, null, null, null, null, null],\r\n      attrs: { md: \"4\", sm: \"6\" },\r\n      datasets: [\r\n        {\r\n          label: \"Today\",\r\n          fill: \"start\",\r\n          borderWidth: 1.5,\r\n          backgroundColor: \"rgba(255,180,0,0.1)\",\r\n          borderColor: \"rgb(255,180,0)\",\r\n          data: []\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      state: `40 cm (%)`,\r\n      icon: <img src={drop2} alt=\"\" />,\r\n      label: dataSensor.humidityMV2,\r\n      chartLabels: [null, null, null, null, null, null, null],\r\n      attrs: { md: \"4\", sm: \"6\" },\r\n      datasets: [\r\n        {\r\n          label: \"Today\",\r\n          fill: \"start\",\r\n          borderWidth: 1.5,\r\n          backgroundColor: \"rgba(255,180,0,0.1)\",\r\n          borderColor: \"rgb(255,180,0)\",\r\n          data: []\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      state: `60 cm (%)`,\r\n      icon: <img src={drop1} alt=\"\" />,\r\n      label: dataSensor.humidityMV3,\r\n      chartLabels: [null, null, null, null, null, null, null],\r\n      attrs: { md: \"4\", sm: \"6\" },\r\n      datasets: [\r\n        {\r\n          label: \"Today\",\r\n          fill: \"start\",\r\n          borderWidth: 1.5,\r\n          backgroundColor: \"rgba(255,180,0,0.1)\",\r\n          borderColor: \"rgb(255,180,0)\",\r\n          data: []\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  let smallStats4 = [\r\n    {\r\n      state: `${t('Temp.')} (°C)`    ,\r\n      icon: <img  src={temp} alt=\"\" />,\r\n      label: dataSensor.temp,\r\n      chartLabels: [null, null, null, null, null, null, null],\r\n      attrs: { md: \"4\", sm: \"6\" },\r\n      datasets: [\r\n        {\r\n          label: \"Today\",\r\n          fill: \"start\",\r\n          borderWidth: 1.5,\r\n          backgroundColor: \"rgba(255,180,0,0.1)\",\r\n          borderColor: \"rgb(255,180,0)\",\r\n          data: []\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      state: `${t('Humidity')} (%)`,\r\n      icon: <img src={humidity} alt=\"\" />,\r\n      label: dataSensor.humidity,\r\n      chartLabels: [null, null, null, null, null, null, null],\r\n      attrs: { md: \"4\", sm: \"6\" },\r\n      datasets: [\r\n        {\r\n          label: \"Today\",\r\n          fill: \"start\",\r\n          borderWidth: 1.5,\r\n          backgroundColor: \"rgba(255,180,0,0.1)\",\r\n          borderColor: \"rgb(255,180,0)\",\r\n          data: []\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      state: `${t('Pression')} (kPa)`,\r\n      icon: <img src={press} alt=\"\" />,\r\n      label: dataSensor.pressure ? parseFloat(dataSensor.pressure).toFixed(2) : \"\",\r\n      chartLabels: [null, null, null, null, null, null, null],\r\n      attrs: { md: \"4\", sm: \"6\" },\r\n      datasets: [\r\n        {\r\n          label: \"Today\",\r\n          fill: \"start\",\r\n          borderWidth: 1.5,\r\n          backgroundColor: \"rgba(255,180,0,0.1)\",\r\n          borderColor: \"rgb(255,180,0)\",\r\n          data: []\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  \r\n  return (\r\n    <Container fluid className=\"main-content-container px-4\">\r\n      {/* Page Header */}\r\n      <Row noGutters className=\"page-header d-flex justify-content-between align-items-center  py-4\">\r\n        <PageTitle\r\n          sm=\"4\"\r\n          title={t('sensors')}\r\n          subtitle={t('overview')}\r\n          className=\"text-sm-left\"\r\n        />\r\n      </Row>\r\n      <Row noGutters className=\"page-header py-4\">\r\n        {/* <Col lg=\"6\" md=\"8\" sm=\"8\" className=\"mb-4\">\r\n          <h6 className=\"m-0\">{t('search_sensors')}</h6>\r\n          <FormSelect\r\n            value={searchCode}\r\n            onChange={(e) => setSearchCode(e.target.value)}\r\n          >\r\n            <option value=\"\" disabled selected>{t('sensor_code')}</option>\r\n            {\r\n              dataSensors.map(sensor=>{\r\n                return <option value={sensor.code}>{sensor.code}</option>\r\n\r\n              })\r\n            }\r\n            </FormSelect>\r\n        </Col> */}\r\n        {/* <Col lg=\"6\" md=\"8\" sm=\"8\" className=\"mb-4\">\r\n          {\" \"}\r\n          <h6 className=\"m-0\">{t('filter_state')}</h6>\r\n          <FormSelect onChange={evt => { setSearchState(evt.target.value) }}>\r\n            <option value='online'>{t('online')}</option>\r\n            <option value='low'>{t('low_batt')}</option>\r\n            <option value='offline'>{t('offline')}</option>\r\n          </FormSelect>\r\n        </Col> */}\r\n        {/* <Col lg=\"4\" md=\"8\" sm=\"8\" className=\"mb-4\">\r\n          {\" \"}\r\n          <h6 className=\"m-0\">{t('filter_field')}</h6>\r\n          <FormSelect value={searchField} onChange={evt =>  setSearchField(evt.target.value)}>\r\n            <option value=\"\" >{t('select_field')}</option>\r\n            {\r\n              fields.map(field => (\r\n                <option value={field.id}>{field.name}</option>\r\n              ))\r\n            }\r\n          </FormSelect>\r\n        </Col> */}\r\n        \r\n         {\r\n         fields.map(field => {\r\n          const matchingSensors = field.sensors.filter(sensor => (sensor.field_id === field.id) && (sensor.code === dataSensor.code));\r\n          const fieldNames = matchingSensors.map(sensor => field.name);\r\n          return (\r\n            <div>\r\n              {fieldNames.map(fieldName => (\r\n                  <h4>{t('fields')} : {fieldName}</h4>\r\n              ))}\r\n            </div>\r\n          );\r\n        })\r\n        }\r\n        \r\n        \r\n\r\n      </Row>\r\n      <Row>\r\n            <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-4\">\r\n            <p style={{ margin: 0 }}>{t('sensor_stats_air')}</p>\r\n            <Card small className=\"stats-small\">\r\n                <CardBody className=\"p-0 d-flex\">\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"row\",\r\n                      flexWrap: \"wrap\",\r\n                      width: \"100%\"\r\n                    }}\r\n                  >\r\n                    {smallStats4.map((stats, idx) => (\r\n                      <>\r\n                        <SmallStatsFields\r\n                        // ToSensorPage={ToSensorPage}\r\n                          style={{\r\n                            borderColor: \"blue\",\r\n                            borderWidth: 2,\r\n                            borderStyle: \"solid\"\r\n                          }}\r\n                          id={`small-stats-${idx}`}\r\n                          variation=\"1\"\r\n                          // chartData={stats.datasets}\r\n                          // chartLabels={stats.chartLabels}\r\n                          label={stats.label}\r\n                          value={stats.value}\r\n                          icon={stats.icon}\r\n                          state={stats.state}\r\n                        />\r\n                        {idx != 2 ? (\r\n                          <hr\r\n                            style={{\r\n                              backgroundColor: \"#ebebeb\",\r\n                              width: \"1px\",\r\n                              height: \"75%\"\r\n                            }}\r\n                          />\r\n                        ) : (\r\n                          <></>\r\n                        )}\r\n                      </>\r\n                    ))}\r\n                  </div>\r\n                </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-4\">\r\n            <p style={{ margin: 0 }}>{t('sensor_stats_soil')}</p>\r\n            <Card small className=\"stats-small\">\r\n              <CardBody className=\"p-0 d-flex\">\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    flexWrap: \"wrap\",\r\n                    width: \"100%\"\r\n                  }}\r\n                >\r\n                  {smallStats3.map((stats, idx) => (\r\n                    <>\r\n                      <SmallStatsFields\r\n                      // ToSensorPage={ToSensorPage}\r\n                        style={{\r\n                          borderColor: \"blue\",\r\n                          borderWidth: 2,\r\n                          borderStyle: \"solid\"\r\n                        }}\r\n                        id={`small-stats-${idx}`}\r\n                        variation=\"1\"\r\n                        // chartData={stats.datasets}\r\n                        // chartLabels={stats.chartLabels}\r\n                        label={stats.label}\r\n                        value={stats.value}\r\n                        icon={stats.icon}\r\n                        state={stats.state}\r\n                      />\r\n                      {idx != 2 ? (\r\n                        <hr\r\n                          style={{\r\n                            backgroundColor: \"#ebebeb\",\r\n                            width: \"1px\",\r\n                            height: \"75%\"\r\n                          }}\r\n                        />\r\n                      ) : (\r\n                        <></>\r\n                      )}\r\n                    </>\r\n                  ))}\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n\r\n        </Row>\r\n     \r\n\r\n        {\r\n          isLoading ?\r\n          <LoadingSpinner />\r\n      \r\n            : \r\n            <Row>\r\n              <DBSensor filteredSensors={dataSensor} chargeLevel={batteryLevel} readingtime={readingtime}/>\r\n          </Row>\r\n        }\r\n\r\n    </Container>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}