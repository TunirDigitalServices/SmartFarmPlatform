{"ast":null,"code":"import _slicedToArray from \"/var/www/prod/smartfarm/backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/var/www/prod/smartfarm/backoffice/frontend/src/components/Simulation/EvapoChart.js\";\n\nimport moment from 'moment';\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { useTranslation } from \"react-i18next\";\nimport { Col } from 'shards-react';\n\nvar EvapoChart = function EvapoChart(_ref) {\n  var data = _ref.data;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t,\n      i18n = _useTranslation.i18n;\n\n  var getChartData = function getChartData() {\n    var labels = [];\n    var dataETC = [];\n\n    for (var i = 0; i < data.length; i++) {\n      if (data[i] && data[i].dates) {\n        var allDate = data[i].dates;\n        var day = moment(allDate).locale('En').format('MMM DD YYYY'); // Add 24 data points for each day\n\n        for (var hour = 0; hour < 24; hour++) {\n          var time = moment(allDate).hour(hour).format('HH:mm'); // Format time as HH:mm\n\n          labels.push(\"\".concat(day, \" \").concat(time));\n          dataETC.push(parseFloat(data[i].ETC).toFixed(2));\n        }\n      }\n    }\n\n    var chartData = {\n      labels: labels,\n      datasets: [{\n        label: \"\".concat(t('ETC (mm)')),\n        fill: false,\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: '#27A6B7',\n        borderWidth: 2,\n        data: dataETC,\n        lineTension: 0\n      }]\n    };\n    setState(chartData);\n  };\n\n  useEffect(function () {\n    getChartData();\n  }, [data]);\n  return /*#__PURE__*/React.createElement(Line, {\n    data: state,\n    options: {\n      title: {\n        display: true,\n        text: \"\".concat(t('ETC')),\n        fontSize: 14\n      },\n      legend: {\n        display: true,\n        position: 'bottom'\n      },\n      scales: {\n        yAxes: [{\n          ticks: {\n            beginAtZero: true,\n            min: 0\n          }\n        }],\n        xAxes: [{\n          type: 'time',\n          time: {\n            unit: 'hour',\n            stepSize: 1,\n            displayFormats: {\n              hour: 'HH:mm'\n            }\n          }\n        }]\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default EvapoChart;","map":{"version":3,"names":["moment","React","useState","useEffect","Line","useTranslation","Col","EvapoChart","data","state","setState","t","i18n","getChartData","labels","dataETC","i","length","dates","allDate","day","locale","format","hour","time","push","parseFloat","ETC","toFixed","chartData","datasets","label","fill","backgroundColor","borderColor","borderWidth","lineTension","title","display","text","fontSize","legend","position","scales","yAxes","ticks","beginAtZero","min","xAxes","type","unit","stepSize","displayFormats"],"sources":["/var/www/prod/smartfarm/backoffice/frontend/src/components/Simulation/EvapoChart.js"],"sourcesContent":["import moment from 'moment';\nimport React , {useState,useEffect}from 'react'\nimport { Line } from  'react-chartjs-2';\nimport { useTranslation } from \"react-i18next\";\nimport { Col } from 'shards-react';\n\n\nconst EvapoChart = ({ data }) => {\n  const [state, setState] = useState(null);\n  const { t, i18n } = useTranslation();\n\n  const getChartData = () => {\n    let labels = [];\n    let dataETC = [];\n    \n    for (let i = 0; i < data.length; i++) {\n      if (data[i] && data[i].dates) {\n        let allDate = data[i].dates;\n        let day = moment(allDate).locale('En').format('MMM DD YYYY');\n        \n        // Add 24 data points for each day\n        for (let hour = 0; hour < 24; hour++) {\n          let time = moment(allDate).hour(hour).format('HH:mm'); // Format time as HH:mm\n          labels.push(`${day} ${time}`);\n          dataETC.push(parseFloat(data[i].ETC).toFixed(2));\n        }\n      }\n    }\n\n    const chartData = {\n      labels: labels,\n      datasets: [\n        {\n          label: `${t('ETC (mm)')}`,\n          fill: false,\n          backgroundColor: 'rgba(75,192,192,1)',\n          borderColor: '#27A6B7',\n          borderWidth: 2,\n          data: dataETC,\n          lineTension: 0\n        },\n      ]\n    };\n\n    setState(chartData);\n  };\n\n  useEffect(() => {\n    getChartData();\n  }, [data]);\n\n  return (\n    <Line\n      data={state}\n      options={{\n        title: {\n          display: true,\n          text: `${t('ETC')}`,\n          fontSize: 14\n        },\n        legend: {\n          display: true,\n          position: 'bottom'\n        },\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n                min: 0\n              }\n            }\n          ],\n          xAxes: [\n            {\n              type: 'time',\n              time: {\n                unit: 'hour',\n                stepSize: 1,\n                displayFormats: {\n                  hour: 'HH:mm',\n                },\n              },\n            },\n          ],\n        },\n      }}\n    />\n  );\n}\n\nexport default EvapoChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}