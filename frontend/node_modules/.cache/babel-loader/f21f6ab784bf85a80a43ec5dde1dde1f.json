{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\smartFarm\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\smartFarm\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\smartFarm\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\smartFarm\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\smartFarm\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\smartFarm\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\smartFarm\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\smartFarm\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\smartFarm\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\smartFarm\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\smartFarm\\\\backoffice\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\smartFarm\\\\backoffice\\\\frontend\\\\src\\\\components\\\\blog\\\\Chart.js\",\n    _Chart$propTypes;\n\nimport React from \"react\";\nimport axios from 'axios';\nimport PropTypes from \"prop-types\";\nimport { Row, Col, Card, CardHeader, CardBody, Button } from \"shards-react\";\nimport { withRouter } from \"react-router-dom\";\nimport moment from \"moment\";\nimport RangeDatePicker from \"../common/RangeDatePicker\";\nimport Plot from \"../../utils/plot\";\nimport api from '../../api/api';\nvar OverviewChart;\nvar chartData = {};\n\nvar Chart = /*#__PURE__*/function (_React$Component) {\n  _inherits(Chart, _React$Component);\n\n  function Chart(props) {\n    var _this;\n\n    _classCallCheck(this, Chart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chart).call(this));\n\n    _this.componentWillReceiveProps = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(newProps, newState) {\n        var today;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                today = new Date();\n\n                _this.setState({\n                  dataSensor: newProps.dataSensor\n                });\n\n                if (!newProps.dataSensor) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 5;\n                return _this.getDataToChart(newProps.dataSensor);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.getDataToChart = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dataSensor) {\n        var elmTemperature, elmHumidity, elmPressure, elmHumidityMV, macId, tmp, hum, press, humMV1, humMV2, humMV3, date, dt, backgroundColor, borderColor, elm, data, index, chartOptions;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                elmTemperature = [];\n                elmHumidity = [];\n                elmPressure = [];\n                elmHumidityMV = [];\n                macId = \"\";\n                tmp = \"\";\n                hum = \"\";\n                press = \"\";\n                humMV1 = \"\";\n                humMV2 = \"\";\n                humMV3 = \"\";\n                date = '';\n                dt = [];\n                console.log(dataSensor);\n\n                if (dataSensor && dataSensor !== []) {\n                  dataSensor.map(function (sensorData) {\n                    date = sensorData.time;\n                    macId = sensorData.code;\n                    elmTemperature = sensorData.temperature;\n                    dt.push(moment(date.slice(0, 10)).format('DD-MM-YYYY'));\n                    dt = _toConsumableArray(new Set(dt));\n                  }); // time =dataSensor.time[0]\n                  // humidity :data.humidity,\n                  // pressure :data.pressure,\n                  // charge :data.charge,\n                  // adc :data.adc,\n                  // ts :data.ts,\n                  // mv1 : data.mv1,\n                  // mv2 : data.mv2,\n                  // mv3 :data.mv3,\n                  // altitude :data.altitude\n                  //if dataSensor feha data\n                  //  let time = dataSensor.timeb[0]\n                  //  macId = dataSensor.mac_id[0]\n                  //  tmp = dataSensor.temperature[0]\n                  //  hum = dataSensor.humidity[0]\n                  //  press = parseFloat(dataSensor.Pressure[0])\n                  //  humMV1 = dataSensor.MV1[0]\n                  //  humMV2 = dataSensor.MV2[0]\n                  //  humMV3 = dataSensor.MV3[0]\n                  // dt = moment(date.slice(0,10)).format('DD-MM-YYYY');\n                  // elmTemperature= [tmp];\n                  // elmHumidity = [hum];\n                  // elmPressure = [press];\n                  // elmHumidityMV[20] = [humMV1]\n                  // elmHumidityMV[40] = [humMV2]\n                  // elmHumidityMV[60] = [humMV3]\n                } //endif \n\n\n                _context2.next = 17;\n                return _this.setState({\n                  temperatureData: elmTemperature\n                });\n\n              case 17:\n                // await this.setState({pressureData : elmPressure})\n                // await this.setState({humidityData : elmHumidity})\n                // await this.setState({humidityByDepthData : elmHumidityMV})\n                backgroundColor = [\"rgb(91, 239, 125)\", \"rgb(165, 188, 255)\", \"rgb(100, 200, 255)\"];\n                borderColor = [\"rgb(2, 107, 28)\", \"rgb(6, 45, 163)\", \"rgb(5, 20, 163)\"];\n                elm = [];\n                data = [];\n\n                if (_this.props.title === \"Temperature\") {\n                  elm = {\n                    label: macId,\n                    fill: \"start\",\n                    data: _this.state.temperatureData,\n                    backgroundColor: backgroundColor[0],\n                    borderColor: borderColor[0],\n                    pointBackgroundColor: \"#22aa4f\",\n                    pointHoverBackgroundColor: \"rgb(0,123,255)\",\n                    borderWidth: 1.5,\n                    pointRadius: 0,\n                    pointHoverRadius: 3\n                  };\n                  data.push(elm);\n                }\n\n                console.log(data); // if(this.props.title === \"Pressure\"){\n                //     elm = {\n                //       label: macId,\n                //       fill: \"start\",\n                //       data: this.state.pressureData,\n                //       backgroundColor: backgroundColor[0],\n                //       borderColor: borderColor[0],\n                //       pointBackgroundColor: \"#22aa4f\",\n                //       pointHoverBackgroundColor: \"rgb(0,123,255)\",\n                //       borderWidth: 1.5,\n                //       pointRadius: 0,\n                //       pointHoverRadius: 3\n                //     }\n                //     data.push(elm)\n                // }\n                // if(this.props.title === \"Humidity\"){\n                //   elm = {\n                //     label: macId,\n                //     fill: \"start\",\n                //     data: this.state.humidityData,\n                //     backgroundColor: backgroundColor[0],\n                //     borderColor: borderColor[0],\n                //     pointBackgroundColor: \"#22aa4f\",\n                //     pointHoverBackgroundColor: \"rgb(0,123,255)\",\n                //     borderWidth: 1.5,\n                //     pointRadius: 0,\n                //     pointHoverRadius: 3\n                //   }\n                //   data.push(elm)\n                // }\n                // if(this.props.title === \"Subsoil Humidity\"){\n                //   let i = 0;\n                //     [20,40,60].map((item,indx) => {\n                //       elm = {\n                //         label: item,\n                //         fill: \"start\",\n                //         data: this.state.humidityByDepthData[item],\n                //         backgroundColor: backgroundColor[indx],\n                //         borderColor: borderColor[indx],\n                //         pointBackgroundColor: backgroundColor[indx],\n                //         pointHoverBackgroundColor:backgroundColor[indx],\n                //         borderWidth: 1.5,\n                //         pointRadius: 0,\n                //         pointHoverRadius: 3\n                //       }\n                //       data.push(elm)\n                //     })\n                // }\n\n                console.log(dt);\n\n                _this.setState({\n                  dataChart: data\n                });\n\n                for (index = 0; index < dt.length; index++) {\n                  chartData = {\n                    //add date\n                    labels: [dt[index]],\n                    datasets: _this.state.dataChart\n                  };\n                }\n\n                chartOptions = _objectSpread({}, {\n                  responsive: true,\n                  legend: {\n                    position: \"top\",\n                    size: '14'\n                  },\n                  elements: {\n                    line: {\n                      // A higher value makes the line look skewed at this ratio.\n                      tension: 0.3\n                    },\n                    point: {\n                      radius: 0\n                    }\n                  },\n                  scales: {\n                    xAxes: [{\n                      gridLines: false,\n                      ticks: {\n                        padding: 10,\n                        autoSkip: false //  maxRotation: 90,\n                        //  minRotation: 90,\n\n                      } // ticks: {\n                      //   callback(tick, index) {\n                      //     // Jump every 7 values on the X axis labels to avoid clutter.\n                      //     return index % 7 !== 0 ? \"\" : tick;\n                      //   }\n                      // }\n\n                    }],\n                    yAxes: [{\n                      ticks: {\n                        suggestedMax: 45,\n                        callback: function callback(tick) {\n                          if (tick === 0) {\n                            return tick;\n                          } // Format the amounts using Ks for thousands.\n\n\n                          return tick > 999 ? \"\".concat((tick / 1000).toFixed(1), \"K\") : tick;\n                        }\n                      }\n                    }]\n                  },\n                  hover: {\n                    mode: \"x-axis\",\n                    intersect: false\n                  },\n                  tooltips: {\n                    custom: false,\n                    mode: \"x-axis\",\n                    intersect: false\n                  }\n                }, _this.props.chartOptions);\n                OverviewChart = new Plot(_this.canvasRef.current, {\n                  type: \"LineWithLine\",\n                  data: chartData,\n                  options: chartOptions\n                });\n                console.log(OverviewChart); // OverviewChart.destroy();\n\n                OverviewChart.update();\n\n              case 30:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.filtreBydate = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(value, title, codes) {\n        var startDate, endDate, data, postData, chartOptions;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof OverviewChart !== \"undefined\") {\n                  OverviewChart.destroy();\n                }\n\n                _this.setState({\n                  dataChart: []\n                });\n\n                startDate = value.startDate;\n                endDate = value.endDate;\n                data = [];\n                postData = {\n                  sensor_code: codes,\n                  startDate: startDate,\n                  endDate: endDate,\n                  title: title\n                };\n\n                if (startDate && endDate) {\n                  // let dataSensorsElastic = res.data.result\n                  // this.setState({ titleFromApi: res.data.title })\n                  // let elmTemperature = []\n                  // let elmHumidity = []\n                  // let lengthData = []\n                  // this.state.codes.map((co, i) => {\n                  //   let tmp = []\n                  //   let hum = []\n                  //   let dt = []\n                  //   let count = 0\n                  //   dataSensorsElastic.map((item, indx) => {\n                  //     if (co == item.code[0]) {\n                  //       count++;\n                  //       tmp.push(item.temperature)\n                  //       hum.push(item.humidity)\n                  //       dt.push(item.dateTime[0])\n                  //       elmTemperature[co] = { code: co, temparature: tmp, dateTime: dt };\n                  //       elmHumidity[co] = { code: co, humidity: hum, dateTime: dt };\n                  //       lengthData.push(count);\n                  //     }\n                  //   })\n                  // })\n                  // this.setState({ temperatureData: elmTemperature })\n                  // this.setState({ humiditySensor: elmHumidity })\n                  // lengthData = lengthData.filter((v, i, a) => a.indexOf(v) === i)\n                  // this.setState({ lengthData: lengthData })\n                  if (_this.state.titleFromApi == \"Humidity\" && _this.state.codes.length > 0) {\n                    chartData = {\n                      //add date\n                      labels: _this.state.lengthData,\n                      datasets: _this.state.dataChart\n                    };\n                  }\n\n                  if (_this.state.titleFromApi == \"Pressure\" && _this.state.codes.length > 0) {\n                    chartData = {\n                      //add date\n                      labels: _this.state.lengthData,\n                      datasets: _this.state.dataChart\n                    };\n                  } // if (this.state.titleFromApi == \"Temperature\" && this.state.codes.length > 0) {\n                  //   let elm = [];\n                  //   let tmparray = [];\n                  //   let dateTimearray = {}\n                  //   this.state.codes.map((item, indx) => {\n                  //     if (this.state.temperatureData[item]) tmparray = this.state.temperatureData[item].temparature\n                  //     if (this.state.temperatureData[item]) dateTimearray = this.state.temperatureData[item].dateTime\n                  //     elm = {\n                  //       label: item,\n                  //       fill: \"start\",\n                  //       data: tmparray,\n                  //       backgroundColor: backgroundColor[indx],\n                  //       borderColor: borderColor[indx],\n                  //       pointBackgroundColor: \"#22aa4f\",\n                  //       pointHoverBackgroundColor: \"rgb(0,123,255)\",\n                  //       borderWidth: 1.5,\n                  //       pointRadius: 0,\n                  //       pointHoverRadius: 3\n                  //     }\n                  //     data.push(elm)\n                  //     this.setState({ dataChart: data })\n                  //   })\n                  //   chartData = {\n                  //     //add date\n                  //     labels: this.state.lengthData,\n                  //     datasets: this.state.dataChart\n                  //   };\n                  // }\n                  // if (this.state.titleFromApi == \"Humidity\" && this.state.codes.length > 0) {\n                  //   let elm = [];\n                  //   let humidityarray = [];\n                  //   let dateTimearray = {}\n                  //   this.state.codes.map((item, indx) => {\n                  //     if (this.state.humiditySensor[item]) humidityarray = this.state.humiditySensor[item].humidity\n                  //     if (this.state.humiditySensor[item]) dateTimearray = this.state.humiditySensor[item].dateTime\n                  //     elm = {\n                  //       label: item,\n                  //       fill: \"start\",\n                  //       data: humidityarray,\n                  //       backgroundColor: backgroundColor[indx],\n                  //       borderColor: borderColor[indx],\n                  //       pointBackgroundColor: \"#22aa4f\",\n                  //       pointHoverBackgroundColor: \"rgb(0,123,255)\",\n                  //       borderWidth: 1.5,\n                  //       pointRadius: 0,\n                  //       pointHoverRadius: 3\n                  //     }\n                  //     data.push(elm)\n                  //     this.setState({ dataChart: data })\n                  //   })\n                  //   chartData = {\n                  //     //add date\n                  //     labels: this.state.lengthData,\n                  //     datasets: this.state.dataChart\n                  //   };\n                  // }\n\n                }\n\n                chartOptions = _objectSpread({}, {\n                  responsive: true,\n                  legend: {\n                    position: \"top\"\n                  },\n                  elements: {\n                    line: {\n                      // A higher value makes the line look skewed at this ratio.\n                      tension: 0.3\n                    },\n                    point: {\n                      radius: 0\n                    }\n                  },\n                  scales: {\n                    xAxes: [{\n                      gridLines: false\n                      /*ticks: {\r\n                        callback(tick, index) {\r\n                          // Jump every 7 values on the X axis labels to avoid clutter.\r\n                          return index % 7 !== 0 ? \"\" : tick;\r\n                        }\r\n                      }*/\n\n                    }],\n                    yAxes: [{\n                      ticks: {\n                        suggestedMax: 45,\n                        callback: function callback(tick) {\n                          if (tick === 0) {\n                            return tick;\n                          } // Format the amounts using Ks for thousands.\n\n\n                          return tick > 999 ? \"\".concat((tick / 1000).toFixed(1), \"K\") : tick;\n                        }\n                      }\n                    }]\n                  },\n                  hover: {\n                    mode: \"x-axis\",\n                    intersect: false\n                  },\n                  tooltips: {\n                    custom: false,\n                    mode: \"x-axis\",\n                    intersect: false\n                  }\n                }, _this.props.chartOptions);\n                OverviewChart = new Plot(_this.canvasRef.current, {\n                  type: \"LineWithLine\",\n                  data: chartData,\n                  options: chartOptions\n                }); // OverviewChart.destroy();\n\n                OverviewChart.update();\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x4, _x5, _x6) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.ReportButton = function () {\n      if (_this.props.hasButton == true) {\n        return /*#__PURE__*/React.createElement(Col, {\n          __self: _assertThisInitialized(_assertThisInitialized(_this)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          onClick: function onClick() {\n            return _this.props.history.push(\"/Graphs\");\n          },\n          size: \"sm\",\n          className: \"d-flex btn-white ml-auto mr-auto ml-sm-auto mr-sm-0 mt-3 mt-sm-0\",\n          __self: _assertThisInitialized(_assertThisInitialized(_this)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 11\n          }\n        }, \"View Detailed Report\"));\n      }\n    };\n\n    _this.goToSelctedChart = function (title) {\n      _this.props.history.push(\"/Graphs/\".concat(title));\n\n      window.location.reload();\n    };\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chart).call(this, props));\n\n    _this.componentWillReceiveProps = function () {\n      var _ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(newProps, newState) {\n        var today;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                today = new Date();\n\n                _this.setState({\n                  dataSensor: newProps.dataSensor\n                });\n\n                if (!newProps.dataSensor) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 5;\n                return _this.getDataToChart(newProps.dataSensor);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.getDataToChart = function () {\n      var _ref2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(dataSensor) {\n        var elmTemperature, elmHumidity, elmPressure, elmHumidityMV, macId, tmp, hum, press, humMV1, humMV2, humMV3, date, dt, backgroundColor, borderColor, elm, data, index, chartOptions;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                elmTemperature = [];\n                elmHumidity = [];\n                elmPressure = [];\n                elmHumidityMV = [];\n                macId = \"\";\n                tmp = \"\";\n                hum = \"\";\n                press = \"\";\n                humMV1 = \"\";\n                humMV2 = \"\";\n                humMV3 = \"\";\n                date = '';\n                dt = [];\n                console.log(dataSensor);\n\n                if (dataSensor && dataSensor !== []) {\n                  dataSensor.map(function (sensorData) {\n                    date = sensorData.time;\n                    macId = sensorData.code;\n                    elmTemperature = sensorData.temperature;\n                    dt.push(moment(date.slice(0, 10)).format('DD-MM-YYYY'));\n                    dt = _toConsumableArray(new Set(dt));\n                  });\n                }\n\n                _context2.next = 17;\n                return _this.setState({\n                  temperatureData: elmTemperature\n                });\n\n              case 17:\n                backgroundColor = [\"rgb(91, 239, 125)\", \"rgb(165, 188, 255)\", \"rgb(100, 200, 255)\"];\n                borderColor = [\"rgb(2, 107, 28)\", \"rgb(6, 45, 163)\", \"rgb(5, 20, 163)\"];\n                elm = [];\n                data = [];\n\n                if (_this.props.title === \"Temperature\") {\n                  elm = {\n                    label: macId,\n                    fill: \"start\",\n                    data: _this.state.temperatureData,\n                    backgroundColor: backgroundColor[0],\n                    borderColor: borderColor[0],\n                    pointBackgroundColor: \"#22aa4f\",\n                    pointHoverBackgroundColor: \"rgb(0,123,255)\",\n                    borderWidth: 1.5,\n                    pointRadius: 0,\n                    pointHoverRadius: 3\n                  };\n                  data.push(elm);\n                }\n\n                console.log(data);\n                console.log(dt);\n\n                _this.setState({\n                  dataChart: data\n                });\n\n                for (index = 0; index < dt.length; index++) {\n                  chartData = {\n                    labels: [dt[index]],\n                    datasets: _this.state.dataChart\n                  };\n                }\n\n                chartOptions = _objectSpread({}, {\n                  responsive: true,\n                  legend: {\n                    position: \"top\",\n                    size: '14'\n                  },\n                  elements: {\n                    line: {\n                      tension: 0.3\n                    },\n                    point: {\n                      radius: 0\n                    }\n                  },\n                  scales: {\n                    xAxes: [{\n                      gridLines: false,\n                      ticks: {\n                        padding: 10,\n                        autoSkip: false\n                      }\n                    }],\n                    yAxes: [{\n                      ticks: {\n                        suggestedMax: 45,\n                        callback: function callback(tick) {\n                          if (tick === 0) {\n                            return tick;\n                          }\n\n                          return tick > 999 ? \"\".concat((tick / 1000).toFixed(1), \"K\") : tick;\n                        }\n                      }\n                    }]\n                  },\n                  hover: {\n                    mode: \"x-axis\",\n                    intersect: false\n                  },\n                  tooltips: {\n                    custom: false,\n                    mode: \"x-axis\",\n                    intersect: false\n                  }\n                }, _this.props.chartOptions);\n                OverviewChart = new Plot(_this.canvasRef.current, {\n                  type: \"LineWithLine\",\n                  data: chartData,\n                  options: chartOptions\n                });\n                console.log(OverviewChart);\n                OverviewChart.update();\n\n              case 30:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.filtreBydate = function () {\n      var _ref3 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(value, title, codes) {\n        var startDate, endDate, data, postData, chartOptions;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof OverviewChart !== \"undefined\") {\n                  OverviewChart.destroy();\n                }\n\n                _this.setState({\n                  dataChart: []\n                });\n\n                startDate = value.startDate;\n                endDate = value.endDate;\n                data = [];\n                postData = {\n                  sensor_code: codes,\n                  startDate: startDate,\n                  endDate: endDate,\n                  title: title\n                };\n\n                if (startDate && endDate) {\n                  if (_this.state.titleFromApi == \"Humidity\" && _this.state.codes.length > 0) {\n                    chartData = {\n                      labels: _this.state.lengthData,\n                      datasets: _this.state.dataChart\n                    };\n                  }\n\n                  if (_this.state.titleFromApi == \"Pressure\" && _this.state.codes.length > 0) {\n                    chartData = {\n                      labels: _this.state.lengthData,\n                      datasets: _this.state.dataChart\n                    };\n                  }\n                }\n\n                chartOptions = _objectSpread({}, {\n                  responsive: true,\n                  legend: {\n                    position: \"top\"\n                  },\n                  elements: {\n                    line: {\n                      tension: 0.3\n                    },\n                    point: {\n                      radius: 0\n                    }\n                  },\n                  scales: {\n                    xAxes: [{\n                      gridLines: false\n                    }],\n                    yAxes: [{\n                      ticks: {\n                        suggestedMax: 45,\n                        callback: function callback(tick) {\n                          if (tick === 0) {\n                            return tick;\n                          }\n\n                          return tick > 999 ? \"\".concat((tick / 1000).toFixed(1), \"K\") : tick;\n                        }\n                      }\n                    }]\n                  },\n                  hover: {\n                    mode: \"x-axis\",\n                    intersect: false\n                  },\n                  tooltips: {\n                    custom: false,\n                    mode: \"x-axis\",\n                    intersect: false\n                  }\n                }, _this.props.chartOptions);\n                OverviewChart = new Plot(_this.canvasRef.current, {\n                  type: \"LineWithLine\",\n                  data: chartData,\n                  options: chartOptions\n                });\n                OverviewChart.update();\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x4, _x5, _x6) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.ReportButton = function () {\n      if (_this.props.hasButton == true) {\n        return React.createElement(Col, {\n          __self: _assertThisInitialized(_assertThisInitialized(_this)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 9\n          }\n        }, React.createElement(Button, {\n          onClick: function onClick() {\n            return _this.props.history.push(\"/Graphs\");\n          },\n          size: \"sm\",\n          className: \"d-flex btn-white ml-auto mr-auto ml-sm-auto mr-sm-0 mt-3 mt-sm-0\",\n          __self: _assertThisInitialized(_assertThisInitialized(_this)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 11\n          }\n        }, \"View Detailed Report\"));\n      }\n    };\n\n    _this.goToSelctedChart = function (title) {\n      _this.props.history.push(\"/Graphs/\".concat(title));\n\n      window.location.reload();\n    };\n\n    _this.canvasRef = React.createRef();\n    _this.state = {\n      dataSensorsElastic: [],\n      temperatureData: [],\n      pressureData: [],\n      humidityData: [],\n      humidityByDepthData: [],\n      dateTimeSensor: [],\n      humiditySensor: [],\n      startDate: new Date(),\n      endDate: new Date(),\n      codes: [],\n      dataChart: [],\n      lengthData: [],\n      titleFromApi: \"\",\n      dataSensor: []\n    };\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var title = this.props.title;\n\n      var renderTitle = function renderTitle() {\n        switch (title) {\n          case \"Temperature\":\n            return /*#__PURE__*/React.createElement(\"h6\", {\n              className: \"m-0\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 15\n              }\n            }, title, \" (\\xB0C)\");\n\n          case \"Pressure\":\n            return /*#__PURE__*/React.createElement(\"h6\", {\n              className: \"m-0\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 17\n              }\n            }, title, \" (Pa)\");\n\n          case \"Humidity\":\n            return /*#__PURE__*/React.createElement(\"h6\", {\n              className: \"m-0\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 492,\n                columnNumber: 19\n              }\n            }, title, \" (%)\");\n\n          case \"Subsoil Humidity\":\n            return /*#__PURE__*/React.createElement(\"h6\", {\n              className: \"m-0\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 494,\n                columnNumber: 17\n              }\n            }, title, \" (%)\");\n\n          default:\n            break;\n        }\n      };\n\n      return /*#__PURE__*/React.createElement(Card, {\n        small: true,\n        className: \"h-100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(CardHeader, {\n        className: \"border-bottom d-flex justify-content-between\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 9\n        }\n      }, renderTitle(), /*#__PURE__*/React.createElement(Button, {\n        onClick: function onClick() {\n          return _this2.goToSelctedChart(title);\n        },\n        squared: true,\n        theme: \"light\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        height: \"24\",\n        width: \"24\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"path\", {\n        d: \"M5.075 21.2Q4.125 21.2 3.463 20.538Q2.8 19.875 2.8 18.925V5.075Q2.8 4.125 3.463 3.462Q4.125 2.8 5.075 2.8H12V5.075H5.075Q5.075 5.075 5.075 5.075Q5.075 5.075 5.075 5.075V18.925Q5.075 18.925 5.075 18.925Q5.075 18.925 5.075 18.925H18.925Q18.925 18.925 18.925 18.925Q18.925 18.925 18.925 18.925V12H21.2V18.925Q21.2 19.875 20.538 20.538Q19.875 21.2 18.925 21.2ZM9.875 15.7 8.3 14.125 17.35 5.075H14V2.8H21.2V10H18.925V6.65Z\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 76\n        }\n      })))), /*#__PURE__*/React.createElement(CardBody, {\n        className: \"pt-0 bg-light\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        className: \"border-bottom py-2 bg-light\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        sm: \"6\",\n        className: \"d-flex mb-2 mb-sm-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(RangeDatePicker, {\n        onChange: function onChange(value) {\n          return _this2.filtreBydate(value, title, _this2.state.codes);\n        },\n        EndingDatePlaceHolder: \"End Date\",\n        StartingDatePlaceHolder: \"Start Date\",\n        selected: new Date(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 15\n        }\n      })), this.ReportButton()), /*#__PURE__*/React.createElement(\"canvas\", {\n        height: \"140\",\n        ref: this.canvasRef,\n        style: {\n          maxWidth: \"100% !important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return Chart;\n}(React.Component);\n\nChart.propTypes = (_Chart$propTypes = {\n  /**\r\n   * The component's title.\r\n   */\n  title: PropTypes.string,\n  code: PropTypes.array,\n  temperatureData: PropTypes.array,\n  selected: PropTypes.object,\n\n  /**\r\n   * The component's data.\r\n   */\n  data: PropTypes.array\n}, _defineProperty(_Chart$propTypes, \"data\", PropTypes.array), _defineProperty(_Chart$propTypes, \"chartName\", PropTypes.string), _defineProperty(_Chart$propTypes, \"hasButton\", PropTypes.bool), _defineProperty(_Chart$propTypes, \"dataSet\", PropTypes.array), _defineProperty(_Chart$propTypes, \"labels\", PropTypes.array), _defineProperty(_Chart$propTypes, \"sensorLevels\", PropTypes.array), _defineProperty(_Chart$propTypes, \"chartOptions\", PropTypes.object), _Chart$propTypes); // Chart.defaultProps = {\n//   title: \"Field Status\",\n//   hasButton: true,\n//   chartName: \"Chart X\",\n//   labels: Array.from(new Array(7), (_, i) => (i === 0 ? 1 : i)),\n//   sensorLevels: [500, 200],\n//   dataSet: [\n//     {\n//       label: \"Precipitations\",\n//       fill: \"start\",\n//       data: [1500, 1300, 1750],\n//       backgroundColor: \"rgba(0,123,255,0.1)\",\n//       borderColor: \"rgba(0,123,255,1)\",\n//       pointBackgroundColor: \"#ffffff\",\n//       pointHoverBackgroundColor: \"rgb(0,123,255)\",\n//       borderWidth: 1.5,\n//       pointRadius: 0,\n//       pointHoverRadius: 3\n//     },\n//     {\n//       label: \"Level1\",\n//       fill: \"start\",\n//       data: [2000, 2000, 2000],\n//       backgroundColor: \"rgba(255,65,105,0.0)\",\n//       borderColor: \"rgba(255,65,105,1)\",\n//       pointBackgroundColor: \"#ffffff\",\n//       pointHoverBackgroundColor: \"rgba(255,65,105,1)\",\n//       borderDash: [3, 3],\n//       borderWidth: 1,\n//       pointRadius: 0,\n//       pointHoverRadius: 2,\n//       pointBorderColor: \"rgba(255,65,105,1)\"\n//     },\n//     {\n//       fill: \"start\",\n//       label: \"Level2\",\n//       data: [1000, 1000, 1000],\n//       backgroundColor: \"rgba(255,65,105,0.0)\",\n//       borderColor: \"rgba(255,65,105,1)\",\n//       pointBackgroundColor: \"#ffffff\",\n//       pointHoverBackgroundColor: \"rgba(255,65,105,1)\",\n//       borderDash: [3, 3],\n//       borderWidth: 1,\n//       pointRadius: 0,\n//       pointHoverRadius: 2,\n//       pointBorderColor: \"rgba(255,65,105,1)\"\n//     }\n//   ]\n// };\n\nexport default withRouter(Chart);","map":{"version":3,"names":["React","axios","PropTypes","Row","Col","Card","CardHeader","CardBody","Button","withRouter","moment","RangeDatePicker","Plot","api","OverviewChart","chartData","Chart","props","componentWillReceiveProps","newProps","newState","today","Date","setState","dataSensor","getDataToChart","elmTemperature","elmHumidity","elmPressure","elmHumidityMV","macId","tmp","hum","press","humMV1","humMV2","humMV3","date","dt","console","log","map","sensorData","time","code","temperature","push","slice","format","Set","temperatureData","backgroundColor","borderColor","elm","data","title","label","fill","state","pointBackgroundColor","pointHoverBackgroundColor","borderWidth","pointRadius","pointHoverRadius","dataChart","index","length","labels","datasets","chartOptions","responsive","legend","position","size","elements","line","tension","point","radius","scales","xAxes","gridLines","ticks","padding","autoSkip","yAxes","suggestedMax","callback","tick","toFixed","hover","mode","intersect","tooltips","custom","canvasRef","current","type","options","update","filtreBydate","value","codes","destroy","startDate","endDate","postData","sensor_code","titleFromApi","lengthData","ReportButton","hasButton","history","goToSelctedChart","window","location","reload","createRef","dataSensorsElastic","pressureData","humidityData","humidityByDepthData","dateTimeSensor","humiditySensor","renderTitle","maxWidth","Component","propTypes","string","array","selected","object","bool"],"sources":["C:/Users/lenovo/Desktop/smartFarm/backoffice/frontend/src/components/blog/Chart.js"],"sourcesContent":["import React from \"react\";\r\nimport axios from 'axios'\r\nimport PropTypes from \"prop-types\";\r\nimport { Row, Col, Card, CardHeader, CardBody, Button } from \"shards-react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport RangeDatePicker from \"../common/RangeDatePicker\";\r\nimport Plot from \"../../utils/plot\";\r\nimport api from '../../api/api';\r\nlet OverviewChart;\r\nlet chartData = {};\r\n\r\nclass Chart extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    super(props);\r\n    this.canvasRef = React.createRef();\r\n    this.state = {\r\n      dataSensorsElastic: [],\r\n      temperatureData: [],\r\n      pressureData: [],\r\n      humidityData: [],\r\n      humidityByDepthData: [],\r\n      dateTimeSensor: [],\r\n      humiditySensor: [],\r\n      startDate: new Date(),\r\n      endDate: new Date(),\r\n      codes: [],\r\n      dataChart: [],\r\n      lengthData: [],\r\n      titleFromApi: \"\",\r\n      dataSensor : []\r\n   \r\n    }\r\n  }\r\n \r\n\r\n  componentWillReceiveProps = async (newProps, newState) => {\r\n    var today = new Date();\r\n     this.setState({ dataSensor: newProps.dataSensor })\r\n    if (newProps.dataSensor) {\r\n      await this.getDataToChart(newProps.dataSensor)\r\n      // await this.filtreBydate(\r\n      //   {\r\n      //     startDate: new Date(today.getFullYear(), today.getMonth(), today.getDate(), '00', '01', '00'),\r\n      //     endDate: new Date(today.getFullYear(), today.getMonth(), today.getDate(), '23', '59', '00')\r\n      //   }\r\n      //   , this.props.title, this.state.codes);\r\n    }\r\n\r\n    // They can still be triggered on hover.\r\n    //const buoMeta = OverviewChart.getDatasetMeta(0);\r\n    //buoMeta.data[0]._model.radius = 0;\r\n    //buoMeta.data[chartData.datasets[0].data.length - 1]._model.radius = 0;\r\n\r\n    // Render the chart.\r\n  }\r\n\r\n  getDataToChart = async (dataSensor) => {\r\n    let elmTemperature = []\r\n    let elmHumidity = []\r\n    let elmPressure = []\r\n    let elmHumidityMV = []\r\n      let macId = \"\"\r\n      let tmp = \"\"\r\n      let hum = \"\"\r\n      let press =\"\"\r\n      let humMV1 = \"\"\r\n      let humMV2 = \"\"\r\n      let humMV3 = \"\"\r\n      let date = ''\r\n      let dt = []\r\n      console.log(dataSensor)\r\n      if(dataSensor && dataSensor !== []){\r\n        \r\n        dataSensor.map(sensorData => {\r\n          date = sensorData.time\r\n          macId= sensorData.code\r\n          elmTemperature =sensorData.temperature\r\n          dt.push(moment(date.slice(0,10)).format('DD-MM-YYYY'))\r\n          dt = ([...new Set(dt)])\r\n        })\r\n        // time =dataSensor.time[0]\r\n        // humidity :data.humidity,\r\n        // pressure :data.pressure,\r\n        // charge :data.charge,\r\n        // adc :data.adc,\r\n        // ts :data.ts,\r\n        // mv1 : data.mv1,\r\n        // mv2 : data.mv2,\r\n        // mv3 :data.mv3,\r\n        // altitude :data.altitude\r\n     //if dataSensor feha data\r\n    //  let time = dataSensor.timeb[0]\r\n      //  macId = dataSensor.mac_id[0]\r\n      //  tmp = dataSensor.temperature[0]\r\n      //  hum = dataSensor.humidity[0]\r\n      //  press = parseFloat(dataSensor.Pressure[0])\r\n      //  humMV1 = dataSensor.MV1[0]\r\n      //  humMV2 = dataSensor.MV2[0]\r\n      //  humMV3 = dataSensor.MV3[0]\r\n      // dt = moment(date.slice(0,10)).format('DD-MM-YYYY');\r\n      // elmTemperature= [tmp];\r\n      // elmHumidity = [hum];\r\n      // elmPressure = [press];\r\n      // elmHumidityMV[20] = [humMV1]\r\n      // elmHumidityMV[40] = [humMV2]\r\n      // elmHumidityMV[60] = [humMV3]\r\n      }\r\n      //endif \r\n\r\n    await this.setState({temperatureData : elmTemperature})\r\n    // await this.setState({pressureData : elmPressure})\r\n    // await this.setState({humidityData : elmHumidity})\r\n    // await this.setState({humidityByDepthData : elmHumidityMV})\r\n    let backgroundColor = [\"rgb(91, 239, 125)\", \"rgb(165, 188, 255)\", \"rgb(100, 200, 255)\"]\r\n    let borderColor = [\"rgb(2, 107, 28)\", \"rgb(6, 45, 163)\", \"rgb(5, 20, 163)\"]\r\n    let elm = [];\r\n    let data = [];\r\n    if(this.props.title === \"Temperature\"){\r\n\r\n      elm = {\r\n        label: macId,\r\n        fill: \"start\",\r\n        data: this.state.temperatureData,\r\n        backgroundColor: backgroundColor[0],\r\n        borderColor: borderColor[0],\r\n        pointBackgroundColor: \"#22aa4f\",\r\n        pointHoverBackgroundColor: \"rgb(0,123,255)\",\r\n        borderWidth: 1.5,\r\n        pointRadius: 0,\r\n        pointHoverRadius: 3\r\n      }\r\n      data.push(elm)\r\n      \r\n    }\r\n    console.log(data)\r\n// if(this.props.title === \"Pressure\"){\r\n\r\n//     elm = {\r\n//       label: macId,\r\n//       fill: \"start\",\r\n//       data: this.state.pressureData,\r\n//       backgroundColor: backgroundColor[0],\r\n//       borderColor: borderColor[0],\r\n//       pointBackgroundColor: \"#22aa4f\",\r\n//       pointHoverBackgroundColor: \"rgb(0,123,255)\",\r\n//       borderWidth: 1.5,\r\n//       pointRadius: 0,\r\n//       pointHoverRadius: 3\r\n//     }\r\n//     data.push(elm)\r\n// }\r\n// if(this.props.title === \"Humidity\"){\r\n\r\n//   elm = {\r\n//     label: macId,\r\n//     fill: \"start\",\r\n//     data: this.state.humidityData,\r\n//     backgroundColor: backgroundColor[0],\r\n//     borderColor: borderColor[0],\r\n//     pointBackgroundColor: \"#22aa4f\",\r\n//     pointHoverBackgroundColor: \"rgb(0,123,255)\",\r\n//     borderWidth: 1.5,\r\n//     pointRadius: 0,\r\n//     pointHoverRadius: 3\r\n//   }\r\n//   data.push(elm)\r\n  \r\n// }\r\n// if(this.props.title === \"Subsoil Humidity\"){\r\n//   let i = 0;\r\n//     [20,40,60].map((item,indx) => {\r\n//       elm = {\r\n//         label: item,\r\n//         fill: \"start\",\r\n//         data: this.state.humidityByDepthData[item],\r\n//         backgroundColor: backgroundColor[indx],\r\n//         borderColor: borderColor[indx],\r\n//         pointBackgroundColor: backgroundColor[indx],\r\n//         pointHoverBackgroundColor:backgroundColor[indx],\r\n//         borderWidth: 1.5,\r\n//         pointRadius: 0,\r\n//         pointHoverRadius: 3\r\n//       }\r\n//       data.push(elm)\r\n//     })\r\n// }\r\nconsole.log(dt)\r\nthis.setState({ dataChart: data })\r\nfor (let index = 0; index < dt.length; index++) {\r\n  chartData = {\r\n  //add date\r\n  labels: [dt[index]],\r\n  datasets: this.state.dataChart\r\n  \r\n  };\r\n  \r\n}\r\n  const chartOptions = {\r\n    ...{\r\n      responsive: true,\r\n      legend: {\r\n        position: \"top\",\r\n        size :'14'\r\n      },\r\n      elements: {\r\n        line: {\r\n          // A higher value makes the line look skewed at this ratio.\r\n          tension: 0.3\r\n        },\r\n        point: {\r\n          radius: 0\r\n        }\r\n      },\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            gridLines: false,\r\n            ticks: {\r\n              padding: 10,\r\n              autoSkip: false,\r\n              //  maxRotation: 90,\r\n              //  minRotation: 90,\r\n            }\r\n            // ticks: {\r\n            //   callback(tick, index) {\r\n            //     // Jump every 7 values on the X axis labels to avoid clutter.\r\n            //     return index % 7 !== 0 ? \"\" : tick;\r\n            //   }\r\n            // }\r\n          }\r\n        ],\r\n        yAxes: [\r\n          {\r\n            ticks: {\r\n              suggestedMax: 45,\r\n              callback(tick) {\r\n                if (tick === 0) {\r\n                  return tick;\r\n                }\r\n                // Format the amounts using Ks for thousands.\r\n                return tick > 999 ? `${(tick / 1000).toFixed(1)}K` : tick;\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      hover: {\r\n        mode: \"x-axis\",\r\n        intersect: false\r\n      },\r\n      tooltips: {\r\n        custom: false,\r\n        mode: \"x-axis\",\r\n        intersect: false\r\n      }\r\n    },\r\n    ...this.props.chartOptions\r\n  };\r\n\r\n  OverviewChart = new Plot(this.canvasRef.current, {\r\n    type: \"LineWithLine\",\r\n    data: chartData,\r\n    options: chartOptions\r\n  });\r\n\r\n  console.log(OverviewChart)\r\n  // OverviewChart.destroy();\r\n  OverviewChart.update();\r\n  }\r\n\r\n\r\n  filtreBydate = async (value, title, codes) => {\r\n\r\n    if (typeof OverviewChart !== \"undefined\") { OverviewChart.destroy(); }\r\n\r\n    this.setState({ dataChart: [] })\r\n    let startDate = value.startDate;\r\n    let endDate = value.endDate;\r\n    let data = [];\r\n    let postData = {\r\n      sensor_code: codes,\r\n      startDate: startDate,\r\n      endDate: endDate,\r\n      title: title\r\n    }\r\n    if (startDate && endDate) {\r\n\r\n          // let dataSensorsElastic = res.data.result\r\n          // this.setState({ titleFromApi: res.data.title })\r\n\r\n          // let elmTemperature = []\r\n          // let elmHumidity = []\r\n          // let lengthData = []\r\n          // this.state.codes.map((co, i) => {\r\n          //   let tmp = []\r\n          //   let hum = []\r\n          //   let dt = []\r\n          //   let count = 0\r\n          //   dataSensorsElastic.map((item, indx) => {\r\n          //     if (co == item.code[0]) {\r\n          //       count++;\r\n          //       tmp.push(item.temperature)\r\n          //       hum.push(item.humidity)\r\n          //       dt.push(item.dateTime[0])\r\n          //       elmTemperature[co] = { code: co, temparature: tmp, dateTime: dt };\r\n          //       elmHumidity[co] = { code: co, humidity: hum, dateTime: dt };\r\n          //       lengthData.push(count);\r\n          //     }\r\n          //   })\r\n          // })\r\n          // this.setState({ temperatureData: elmTemperature })\r\n          // this.setState({ humiditySensor: elmHumidity })\r\n          // lengthData = lengthData.filter((v, i, a) => a.indexOf(v) === i)\r\n          // this.setState({ lengthData: lengthData })\r\n\r\n\r\n\r\n      \r\n      if (this.state.titleFromApi == \"Humidity\" && this.state.codes.length > 0) {\r\n        chartData = {\r\n          //add date\r\n          labels: this.state.lengthData,\r\n          datasets: this.state.dataChart\r\n\r\n        };\r\n      }\r\n      if (this.state.titleFromApi == \"Pressure\" && this.state.codes.length > 0) {\r\n        chartData = {\r\n          //add date\r\n          labels: this.state.lengthData,\r\n          datasets: this.state.dataChart\r\n\r\n        };\r\n      }\r\n\r\n      // if (this.state.titleFromApi == \"Temperature\" && this.state.codes.length > 0) {\r\n      //   let elm = [];\r\n      //   let tmparray = [];\r\n      //   let dateTimearray = {}\r\n      //   this.state.codes.map((item, indx) => {\r\n      //     if (this.state.temperatureData[item]) tmparray = this.state.temperatureData[item].temparature\r\n      //     if (this.state.temperatureData[item]) dateTimearray = this.state.temperatureData[item].dateTime\r\n\r\n      //     elm = {\r\n      //       label: item,\r\n      //       fill: \"start\",\r\n      //       data: tmparray,\r\n      //       backgroundColor: backgroundColor[indx],\r\n      //       borderColor: borderColor[indx],\r\n      //       pointBackgroundColor: \"#22aa4f\",\r\n      //       pointHoverBackgroundColor: \"rgb(0,123,255)\",\r\n      //       borderWidth: 1.5,\r\n      //       pointRadius: 0,\r\n      //       pointHoverRadius: 3\r\n      //     }\r\n      //     data.push(elm)\r\n      //     this.setState({ dataChart: data })\r\n      //   })\r\n      //   chartData = {\r\n      //     //add date\r\n      //     labels: this.state.lengthData,\r\n      //     datasets: this.state.dataChart\r\n\r\n      //   };\r\n      // }\r\n      // if (this.state.titleFromApi == \"Humidity\" && this.state.codes.length > 0) {\r\n      //   let elm = [];\r\n      //   let humidityarray = [];\r\n      //   let dateTimearray = {}\r\n      //   this.state.codes.map((item, indx) => {\r\n      //     if (this.state.humiditySensor[item]) humidityarray = this.state.humiditySensor[item].humidity\r\n      //     if (this.state.humiditySensor[item]) dateTimearray = this.state.humiditySensor[item].dateTime\r\n      //     elm = {\r\n      //       label: item,\r\n      //       fill: \"start\",\r\n      //       data: humidityarray,\r\n      //       backgroundColor: backgroundColor[indx],\r\n      //       borderColor: borderColor[indx],\r\n      //       pointBackgroundColor: \"#22aa4f\",\r\n      //       pointHoverBackgroundColor: \"rgb(0,123,255)\",\r\n      //       borderWidth: 1.5,\r\n      //       pointRadius: 0,\r\n      //       pointHoverRadius: 3\r\n      //     }\r\n      //     data.push(elm)\r\n      //     this.setState({ dataChart: data })\r\n      //   })\r\n      //   chartData = {\r\n      //     //add date\r\n      //     labels: this.state.lengthData,\r\n      //     datasets: this.state.dataChart\r\n\r\n      //   };\r\n      // }\r\n    }\r\n\r\n    const chartOptions = {\r\n      ...{\r\n        responsive: true,\r\n        legend: {\r\n          position: \"top\",\r\n        },\r\n        elements: {\r\n          line: {\r\n            // A higher value makes the line look skewed at this ratio.\r\n            tension: 0.3\r\n          },\r\n          point: {\r\n            radius: 0\r\n          }\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              gridLines: false,\r\n              /*ticks: {\r\n                callback(tick, index) {\r\n                  // Jump every 7 values on the X axis labels to avoid clutter.\r\n                  return index % 7 !== 0 ? \"\" : tick;\r\n                }\r\n              }*/\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                suggestedMax: 45,\r\n                callback(tick) {\r\n                  if (tick === 0) {\r\n                    return tick;\r\n                  }\r\n                  // Format the amounts using Ks for thousands.\r\n                  return tick > 999 ? `${(tick / 1000).toFixed(1)}K` : tick;\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        hover: {\r\n          mode: \"x-axis\",\r\n          intersect: false\r\n        },\r\n        tooltips: {\r\n          custom: false,\r\n          mode: \"x-axis\",\r\n          intersect: false\r\n        }\r\n      },\r\n      ...this.props.chartOptions\r\n    };\r\n\r\n    OverviewChart = new Plot(this.canvasRef.current, {\r\n      type: \"LineWithLine\",\r\n      data: chartData,\r\n      options: chartOptions\r\n    });\r\n    // OverviewChart.destroy();\r\n    OverviewChart.update();\r\n  }\r\n  ReportButton = () => {\r\n    if (this.props.hasButton == true) {\r\n      return (\r\n        <Col>\r\n          <Button\r\n            onClick={() => this.props.history.push(\"/Graphs\")}\r\n            size=\"sm\"\r\n            className=\"d-flex btn-white ml-auto mr-auto ml-sm-auto mr-sm-0 mt-3 mt-sm-0\"\r\n          >\r\n            View Detailed Report\r\n          </Button>\r\n        </Col>\r\n      );\r\n    }\r\n  };\r\n\r\n  goToSelctedChart = (title) => {\r\n    this.props.history.push(`/Graphs/${title}`);\r\n    window.location.reload();\r\n  }\r\n\r\n  render() {\r\n    const { title } = this.props;\r\n  const renderTitle =  () =>{\r\n    switch (title){\r\n      case \"Temperature\":\r\n        return<h6 className=\"m-0\">{title} (°C)</h6>\r\n        case \"Pressure\":\r\n          return<h6 className=\"m-0\">{title} (Pa)</h6>\r\n          case \"Humidity\":\r\n            return<h6 className=\"m-0\">{title} (%)</h6>\r\n          case \"Subsoil Humidity\":\r\n          return<h6 className=\"m-0\">{title} (%)</h6>\r\n      default:\r\n        break;\r\n    }\r\n}\r\n    return (\r\n      <Card small className=\"h-100\">\r\n        <CardHeader className=\"border-bottom d-flex justify-content-between\">\r\n            {renderTitle()}\r\n          <Button onClick={() => this.goToSelctedChart(title)} squared theme=\"light\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" width=\"24\"><path d=\"M5.075 21.2Q4.125 21.2 3.463 20.538Q2.8 19.875 2.8 18.925V5.075Q2.8 4.125 3.463 3.462Q4.125 2.8 5.075 2.8H12V5.075H5.075Q5.075 5.075 5.075 5.075Q5.075 5.075 5.075 5.075V18.925Q5.075 18.925 5.075 18.925Q5.075 18.925 5.075 18.925H18.925Q18.925 18.925 18.925 18.925Q18.925 18.925 18.925 18.925V12H21.2V18.925Q21.2 19.875 20.538 20.538Q19.875 21.2 18.925 21.2ZM9.875 15.7 8.3 14.125 17.35 5.075H14V2.8H21.2V10H18.925V6.65Z\" /></svg>\r\n          </Button>\r\n        </CardHeader>\r\n        <CardBody className=\"pt-0 bg-light\">\r\n          <Row className=\"border-bottom py-2 bg-light\">\r\n            <Col sm=\"6\" className=\"d-flex mb-2 mb-sm-0\">\r\n              <RangeDatePicker\r\n                onChange={value => this.filtreBydate(value, title, this.state.codes)}\r\n                EndingDatePlaceHolder=\"End Date\"\r\n                StartingDatePlaceHolder=\"Start Date\"\r\n                selected={new Date()}\r\n              />\r\n            </Col>\r\n            {this.ReportButton()}\r\n          </Row>\r\n          <canvas\r\n            height=\"140\"\r\n            ref={this.canvasRef}\r\n            style={{ maxWidth: \"100% !important\" }}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nChart.propTypes = {\r\n  /**\r\n   * The component's title.\r\n   */\r\n  title: PropTypes.string,\r\n\r\n  code: PropTypes.array,\r\n  temperatureData: PropTypes.array,\r\n  selected: PropTypes.object,\r\n\r\n\r\n  /**\r\n   * The component's data.\r\n   */\r\n  data: PropTypes.array,\r\n  /**\r\n   * The component's data.\r\n   */\r\n  data: PropTypes.array,\r\n  /**\r\n   * The chart's title.\r\n   */\r\n  chartName: PropTypes.string,\r\n  /**\r\n   * Should the component's Button be rendered .\r\n   */\r\n  hasButton: PropTypes.bool,\r\n  /**\r\n   * The chart's dataset.\r\n   */\r\n  dataSet: PropTypes.array,\r\n  /**\r\n   * The chart's labels.\r\n   */\r\n  labels: PropTypes.array,\r\n  /**\r\n   * The sensor levels.\r\n   */\r\n  sensorLevels: PropTypes.array,\r\n  /**\r\n   * The Chart.js options.\r\n   */\r\n  chartOptions: PropTypes.object\r\n};\r\n\r\n// Chart.defaultProps = {\r\n//   title: \"Field Status\",\r\n//   hasButton: true,\r\n//   chartName: \"Chart X\",\r\n//   labels: Array.from(new Array(7), (_, i) => (i === 0 ? 1 : i)),\r\n//   sensorLevels: [500, 200],\r\n//   dataSet: [\r\n//     {\r\n//       label: \"Precipitations\",\r\n//       fill: \"start\",\r\n//       data: [1500, 1300, 1750],\r\n//       backgroundColor: \"rgba(0,123,255,0.1)\",\r\n//       borderColor: \"rgba(0,123,255,1)\",\r\n//       pointBackgroundColor: \"#ffffff\",\r\n//       pointHoverBackgroundColor: \"rgb(0,123,255)\",\r\n//       borderWidth: 1.5,\r\n//       pointRadius: 0,\r\n//       pointHoverRadius: 3\r\n//     },\r\n//     {\r\n//       label: \"Level1\",\r\n//       fill: \"start\",\r\n//       data: [2000, 2000, 2000],\r\n//       backgroundColor: \"rgba(255,65,105,0.0)\",\r\n//       borderColor: \"rgba(255,65,105,1)\",\r\n//       pointBackgroundColor: \"#ffffff\",\r\n//       pointHoverBackgroundColor: \"rgba(255,65,105,1)\",\r\n//       borderDash: [3, 3],\r\n//       borderWidth: 1,\r\n//       pointRadius: 0,\r\n//       pointHoverRadius: 2,\r\n//       pointBorderColor: \"rgba(255,65,105,1)\"\r\n//     },\r\n//     {\r\n//       fill: \"start\",\r\n//       label: \"Level2\",\r\n//       data: [1000, 1000, 1000],\r\n//       backgroundColor: \"rgba(255,65,105,0.0)\",\r\n//       borderColor: \"rgba(255,65,105,1)\",\r\n//       pointBackgroundColor: \"#ffffff\",\r\n//       pointHoverBackgroundColor: \"rgba(255,65,105,1)\",\r\n//       borderDash: [3, 3],\r\n//       borderWidth: 1,\r\n//       pointRadius: 0,\r\n//       pointHoverRadius: 2,\r\n//       pointBorderColor: \"rgba(255,65,105,1)\"\r\n//     }\r\n//   ]\r\n// };\r\n\r\nexport default withRouter(Chart);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}