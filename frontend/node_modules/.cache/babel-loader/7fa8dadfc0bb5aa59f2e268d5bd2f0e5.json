{"ast":null,"code":"import _objectSpread from \"/var/www/prod/smartfarm/backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/var/www/prod/smartfarm/backoffice/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/var/www/prod/smartfarm/backoffice/frontend/src/components/FieldSettingForms/FieldSoilForm.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Row, Col, Form, FormSelect, Button, Slider, FormInput, FormGroup } from \"shards-react\";\nimport CompositeSoil from \"./compositeSoilForm\";\nimport StandardSoil from \"./standardSoil\";\nimport { useTranslation } from \"react-i18next\";\n\nfunction FieldSoilForm(props) {\n  var _this = this;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t,\n      i18n = _useTranslation.i18n;\n\n  var _useState = useState(props.isStandard),\n      _useState2 = _slicedToArray(_useState, 2),\n      isStandardSoil = _useState2[0],\n      setSoilType = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentDepthLevel = _useState4[0],\n      setDepthLevel = _useState4[1];\n\n  var _useState5 = useState(props.depth),\n      _useState6 = _slicedToArray(_useState5, 2),\n      depthLevel = _useState6[0],\n      setLevel = _useState6[1];\n\n  var _useState7 = useState({\n    zone: 1,\n    mode: \"Manual\",\n    type: props.SoilProp,\n    listSoils: props.listSoils,\n    irrigArea: props.irrigArea\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      otherInfo = _useState8[0],\n      setOI = _useState8[1];\n\n  var _useState9 = useState({\n    soilType: \"\",\n    RUmax: props.RUmax,\n    effPluie: props.effPluie,\n    ruPratique: props.ruPratique,\n    effIrrig: props.effIrrig\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      soilData = _useState10[0],\n      setSoilData = _useState10[1];\n\n  useEffect(function () {\n    //console.log)\n    var CardValues = JSON.stringify(otherInfo);\n    props.onChange(CardValues);\n  }, [props.saved]);\n  useEffect(function () {\n    soilTypeForm();\n    props.handleDepth(props.depth);\n  }, [currentDepthLevel]);\n\n  var handleSoilPick = function handleSoilPick(e) {\n    e.preventDefault();\n    var soilType = otherInfo.listSoils.find(function (soil) {\n      return soil.soil == e.target.value;\n    }); // props.handleEffIrrig(soilType.fc)\n\n    props.handleEffRain(soilType.rain_eff);\n    props.handleRuPractical(soilType.practical_fraction);\n    props.handleRuMax(soilType.ru);\n\n    if (typeof soilType !== \"undefined\") {\n      setSoilData(_objectSpread({}, soilData, {\n        soilType: soilType.soil,\n        RUmax: soilType.ru,\n        effIrrig: soilType.fc,\n        ruPratique: soilType.practical_fraction,\n        effPluie: soilType.rain_eff\n      }));\n    }\n  };\n\n  var soilTypeForm = function soilTypeForm() {\n    if (isStandardSoil == true) return null // <StandardSoil\n    //   listSoils={otherInfo.listSoils}\n    //   key={currentDepthLevel}\n    //   depth={depthLevel[currentDepthLevel].depth}\n    //   uni={depthLevel[currentDepthLevel].uni}\n    //   onChange={value => {\n    //     depthLevel[currentDepthLevel].uni = value.uni;\n    //     depthLevel[currentDepthLevel].depth = value.depth;\n    //   }}\n    // />\n    ;else {\n      return /*#__PURE__*/React.createElement(CompositeSoil, {\n        key: currentDepthLevel + 1,\n        depth: depthLevel[currentDepthLevel].depth,\n        clay: depthLevel[currentDepthLevel].clay,\n        sand: depthLevel[currentDepthLevel].sand,\n        silt: depthLevel[currentDepthLevel].silt,\n        OM: depthLevel[currentDepthLevel].OM,\n        pH: depthLevel[currentDepthLevel].pH,\n        Ecd: depthLevel[currentDepthLevel].Ecd,\n        CEC: depthLevel[currentDepthLevel].CEC,\n        soilProprety: otherInfo.type,\n        soilType: \"\",\n        onChange: function onChange(value) {\n          depthLevel[currentDepthLevel] = value;\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      });\n    }\n  };\n\n  var deleteDepthLevelButton = function deleteDepthLevelButton() {\n    if (depthLevel[currentDepthLevel].depth != 10) {\n      return /*#__PURE__*/React.createElement(Col, {\n        md: \"12\",\n        className: \"form-group\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        theme: \"danger\",\n        onClick: function onClick(evt) {\n          evt.preventDefault();\n          depthLevel.splice(currentDepthLevel, 1);\n          setDepthLevel(currentDepthLevel - 1);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }\n      }, \"delete current depth level\"));\n    }\n  };\n\n  console.log(depthLevel[currentDepthLevel].sand);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n    lg: \"12\",\n    sm: \"12\",\n    md: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    form: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: \"4\",\n    md: \"12\",\n    sm: \"12\",\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      margin: \"0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 15\n    }\n  }, t('soil_zone')), /*#__PURE__*/React.createElement(FormInput, {\n    value: props.zoneName,\n    placeholder: t('soil_zone'),\n    required: true,\n    onChange: props.handleZoneName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    lg: \"4\",\n    md: \"12\",\n    sm: \"12\",\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      margin: \"0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  }, t('name_field')), /*#__PURE__*/React.createElement(FormSelect, {\n    value: otherInfo.field_uid,\n    onChange: props.handleUidField,\n    placeholder: t('name_field'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, t('select_field')), props.fields.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      value: item.Uid,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 26\n      }\n    }, item.title);\n  }))), /*#__PURE__*/React.createElement(Col, {\n    lg: \"4\",\n    md: \"12\",\n    sm: \"12\",\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      margin: \"0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }, t('source')), /*#__PURE__*/React.createElement(FormSelect, {\n    value: props.source,\n    onChange: props.handleSource,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, \"Manual\"))), /*#__PURE__*/React.createElement(Col, {\n    lg: \"4\",\n    md: \"12\",\n    sm: \"12\",\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      margin: \"0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  }, t('soil_prop')), /*#__PURE__*/React.createElement(FormSelect, {\n    onChange: function onChange(evt) {\n      setOI(_objectSpread({}, otherInfo, {\n        type: evt.target.value\n      }));\n      props.handleSoilProprety(evt.target.value); //if (\n      //window.confirm(\n      //  \"Changing soil type risks of deleting all existing depth levels, are you sure to continue?\"\n      //\n      //) {\n\n      setSoilType(!isStandardSoil); //depthLevel.soilProprety = evt.target.value\n      //setDepthLevel({soilProprety: evt.target.value});\n      //setDepthLevel(0);\n      //depthLevel.splice(1, depthLevel.length - 1);\n      //} else {\n      //evt.preventDefault();\n      //}\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    selected: isStandardSoil,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }\n  }, \"Standard\"), /*#__PURE__*/React.createElement(\"option\", {\n    selected: !isStandardSoil,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }, \"Composite\"))), soilTypeForm()), /*#__PURE__*/React.createElement(Row, {\n    form: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: \"4\",\n    md: \"12\",\n    sm: \"12\",\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      margin: \"0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }\n  }, t('soil_type')), /*#__PURE__*/React.createElement(FormSelect, {\n    value: soilData.soilType,\n    onChange: handleSoilPick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 15\n    }\n  }, t('select_soil')), otherInfo.listSoils.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      value: item.soil,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 28\n      }\n    }, item.soil);\n  })))), /*#__PURE__*/React.createElement(Col, {\n    lg: \"4\",\n    md: \"8\",\n    sm: \"8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      margin: \"0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 17\n    }\n  }, t('efficacité_pluie'), \" (%)\"), /*#__PURE__*/React.createElement(FormInput, {\n    value: props.effPluie,\n    onChange: function onChange(e) {\n      return props.handleEffRain(e.target.value);\n    },\n    id: \"effPluie\",\n    placeholder: t('efficacité_pluie'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    lg: \"4\",\n    md: \"8\",\n    sm: \"8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      margin: \"0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 17\n    }\n  }, \"RU max (mm/m)\"), /*#__PURE__*/React.createElement(FormInput, {\n    value: props.RUmax,\n    onChange: function onChange(e) {\n      return props.handleRuMax(e.target.value);\n    },\n    id: \"ruMax\",\n    placeholder: \"RU max\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 17\n    }\n  })))))));\n}\n\nFieldSoilForm.defaultProps = {\n  isStandard: true,\n  SoilProp: \"Standard\",\n  depth: [{\n    depth: 10,\n    clay: 20,\n    sand: 60,\n    silt: 20,\n    CEC: 1,\n    OM: 1,\n    pH: 2,\n    Ecd: 1,\n    uni: \"Clay\",\n    soilProprety: \"Standard\"\n  }]\n};\nexport default FieldSoilForm;","map":{"version":3,"names":["React","useState","useEffect","Row","Col","Form","FormSelect","Button","Slider","FormInput","FormGroup","CompositeSoil","StandardSoil","useTranslation","FieldSoilForm","props","t","i18n","isStandard","isStandardSoil","setSoilType","currentDepthLevel","setDepthLevel","depth","depthLevel","setLevel","zone","mode","type","SoilProp","listSoils","irrigArea","otherInfo","setOI","soilType","RUmax","effPluie","ruPratique","effIrrig","soilData","setSoilData","CardValues","JSON","stringify","onChange","saved","soilTypeForm","handleDepth","handleSoilPick","e","preventDefault","find","soil","target","value","handleEffRain","rain_eff","handleRuPractical","practical_fraction","handleRuMax","ru","fc","clay","sand","silt","OM","pH","Ecd","CEC","deleteDepthLevelButton","evt","splice","console","log","margin","zoneName","handleZoneName","field_uid","handleUidField","fields","map","item","index","Uid","title","source","handleSource","handleSoilProprety","defaultProps","uni","soilProprety"],"sources":["/var/www/prod/smartfarm/backoffice/frontend/src/components/FieldSettingForms/FieldSoilForm.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Form, FormSelect, Button, Slider, FormInput, FormGroup } from \"shards-react\";\nimport CompositeSoil from \"./compositeSoilForm\";\nimport StandardSoil from \"./standardSoil\";\nimport { useTranslation } from \"react-i18next\";\n\nfunction FieldSoilForm(props) {\n  const { t, i18n } = useTranslation();\n  const [isStandardSoil, setSoilType] = useState(props.isStandard);\n  const [currentDepthLevel, setDepthLevel] = useState(0);\n  const [depthLevel, setLevel] = useState(props.depth);\n  const [otherInfo, setOI] = useState({\n    zone: 1,\n    mode: \"Manual\",\n    type: props.SoilProp,\n    listSoils : props.listSoils,\n    irrigArea : props.irrigArea\n  });\n\n  const [soilData,setSoilData] = useState({\n    soilType :\"\",\n    RUmax: props.RUmax,\n    effPluie: props.effPluie,\n    ruPratique: props.ruPratique,\n    effIrrig: props.effIrrig,\n  })\n\n  useEffect(() => {\n    //console.log)\n    let CardValues = JSON.stringify(otherInfo);\n    props.onChange(CardValues);\n  }, [props.saved]);\n\n  useEffect(() => {\n    soilTypeForm();\n    props.handleDepth(props.depth)\n  }, [currentDepthLevel]);\n\n  const handleSoilPick = (e) => {\n    e.preventDefault()\n    const soilType = otherInfo.listSoils.find(\n        (soil) => soil.soil == e.target.value\n    );\n    // props.handleEffIrrig(soilType.fc)\n    props.handleEffRain(soilType.rain_eff)\n    props.handleRuPractical(soilType.practical_fraction)\n    props.handleRuMax(soilType.ru)\n    if (typeof soilType !== \"undefined\") {\n        setSoilData({\n            ...soilData,\n            soilType: soilType.soil,\n            RUmax: soilType.ru,\n            effIrrig: soilType.fc,\n            ruPratique: soilType.practical_fraction,\n            effPluie: soilType.rain_eff\n        });\n\n    }\n};\n\n\n  const soilTypeForm = () => {\n    if (isStandardSoil == true)\n      return (\n          null\n        // <StandardSoil\n        //   listSoils={otherInfo.listSoils}\n        //   key={currentDepthLevel}\n        //   depth={depthLevel[currentDepthLevel].depth}\n        //   uni={depthLevel[currentDepthLevel].uni}\n        //   onChange={value => {\n        //     depthLevel[currentDepthLevel].uni = value.uni;\n        //     depthLevel[currentDepthLevel].depth = value.depth;\n        //   }}\n        // />\n      );\n    else {\n      return (\n        <CompositeSoil\n          key={currentDepthLevel + 1}\n          depth={depthLevel[currentDepthLevel].depth}\n          clay={depthLevel[currentDepthLevel].clay}\n          sand={depthLevel[currentDepthLevel].sand}\n          silt={depthLevel[currentDepthLevel].silt}\n          OM={depthLevel[currentDepthLevel].OM}\n          pH={depthLevel[currentDepthLevel].pH}\n          Ecd={depthLevel[currentDepthLevel].Ecd}\n          CEC={depthLevel[currentDepthLevel].CEC}\n          soilProprety={otherInfo.type}\n          soilType=\"\"\n          onChange={value => {\n            depthLevel[currentDepthLevel] = value;\n          }}\n        />\n      );\n    }\n  };\n\n\n  const deleteDepthLevelButton = () => {\n    if (depthLevel[currentDepthLevel].depth != 10) {\n      return (\n        <Col md=\"12\" className=\"form-group\">\n          <Button\n            theme=\"danger\"\n            onClick={evt => {\n              evt.preventDefault();\n              depthLevel.splice(currentDepthLevel, 1);\n              setDepthLevel(currentDepthLevel - 1);\n            }}\n          >\n            delete current depth level\n          </Button>\n        </Col>\n      );\n    }\n  };\n\n\n  console.log(depthLevel[currentDepthLevel].sand)\n\n  return (\n    <>\n      <Col lg=\"12\" sm=\"12\" md=\"6\">\n        <Form>\n          <Row form>\n            <Col lg='4' md=\"12\" sm=\"12\" className=\"form-group\">\n              <p style={{ margin: \"0px\" }}>{t('soil_zone')}</p>\n              <FormInput\n                value={props.zoneName}\n                placeholder={t('soil_zone')}\n                required\n                onChange={props.handleZoneName}\n\n              />\n            </Col>\n\n            <Col lg='4' md=\"12\" sm=\"12\" className=\"form-group\">\n              <p style={{ margin: \"0px\" }}>{t('name_field')}</p>\n              <FormSelect\n                value={otherInfo.field_uid}\n                onChange={props.handleUidField}\n                placeholder={t('name_field')}\n              >\n                <option value=\"\">{t('select_field')}</option>\n                {props.fields.map((item, index) => {\n                  return <option value={item.Uid}>{item.title}</option>;\n                })}\n              </FormSelect>\n            </Col>\n\n            <Col lg='4' md=\"12\" sm=\"12\" className=\"form-group\">\n              <p style={{ margin: \"0px\" }}>{t('source')}</p>\n              <FormSelect\n                value={props.source}\n                onChange={props.handleSource}\n              >\n                <option>Manual</option>\n              </FormSelect>\n\n            </Col>\n\n            <Col lg='4' md=\"12\" sm=\"12\" className=\"form-group\">\n              <p style={{ margin: \"0px\" }}>{t('soil_prop')}</p>\n              <FormSelect\n                onChange={evt => {\n                  setOI({ ...otherInfo, type: evt.target.value });\n                  props.handleSoilProprety(evt.target.value)\n                  //if (\n                  //window.confirm(\n                  //  \"Changing soil type risks of deleting all existing depth levels, are you sure to continue?\"\n                  //\n                  //) {\n                  setSoilType(!isStandardSoil);\n                  //depthLevel.soilProprety = evt.target.value\n                  //setDepthLevel({soilProprety: evt.target.value});\n                  //setDepthLevel(0);\n                  //depthLevel.splice(1, depthLevel.length - 1);\n                  //} else {\n                  //evt.preventDefault();\n                  //}\n                }}\n              >\n                <option selected={isStandardSoil}>Standard</option>\n                <option selected={!isStandardSoil}>Composite</option>\n              </FormSelect>\n            </Col>\n            {/* <Col lg='4' md=\"12\" sm=\"12\" className=\"form-group\">\n              <p style={{ margin: \"0px\" }}>{t('depth_level')}</p>\n              <FormSelect\n                onChange={evt => {\n                  if (evt.target.value == depthLevel.length) {\n                    depthLevel.push({\n                      depth: evt.target.value,\n                      clay: 20,\n                      sand: 60,\n                      silt: 20,\n                      OM: 0,\n                      pH: 2,\n                      Ecd: 0,\n                      CEC: 1,\n                      uni: \"Sand\",\n                      soilProprety: otherInfo.type\n                    });\n                  }\n                  setDepthLevel(evt.target.value);\n                  props.handleDepth(depthLevel)\n                }}\n              >\n                {depthLevel.map((item, index) => {\n                  if (index == currentDepthLevel) {\n                    return (\n                      <option selected={true} value={index}>\n                        {item.depth}\n                      </option>\n                    );\n                  } else {\n                    return <option value={index}>{item.depth}</option>;\n                  }\n                })}\n                <option value={depthLevel.length}>Add new depth level</option>\n              </FormSelect>\n            </Col> */}\n            {soilTypeForm()}\n            {/* {deleteDepthLevelButton()} */}\n          </Row>\n          <Row form>\n          <Col lg='4' md=\"12\" sm=\"12\" className=\"form-group\">\n          <div>\n            <p style={{ margin: \"0px\" }}>{t('soil_type')}</p>\n            <FormSelect\n            value={soilData.soilType}\n              onChange={handleSoilPick}\n            >\n              <option value=\"\">{t('select_soil')}</option>\n              {\n                otherInfo.listSoils.map((item, index) => {  \n                    return <option value={item.soil} >{item.soil}</option>;\n                \n                })\n              }\n            </FormSelect>\n          </div>\n        </Col>\n            {/* <Col lg=\"4\" md=\"8\" sm=\"8\">\n              <FormGroup>\n                <p style={{ margin: \"0px\" }}>{t('surface_irriguée')} (ha)</p>\n                <FormInput value={props.irrigArea} onChange={e => props.handleIrrigArea(e.target.value)} id=\"surfaceIrrig\" placeholder={t('surface_irriguée')}\n                />\n\n\n              </FormGroup>\n\n            </Col> */}\n            <Col lg=\"4\" md=\"8\" sm=\"8\">\n              <FormGroup>\n                <p style={{ margin: \"0px\" }}>{t('efficacité_pluie')} (%)</p>\n                <FormInput value={props.effPluie} onChange={e => props.handleEffRain(e.target.value)} id='effPluie' placeholder={t('efficacité_pluie')}\n                />\n\n              </FormGroup>\n            </Col>\n            <Col lg=\"4\" md=\"8\" sm=\"8\">\n              <FormGroup>\n                <p style={{ margin: \"0px\" }}>RU max (mm/m)</p>\n                <FormInput value={props.RUmax} onChange={e => props.handleRuMax(e.target.value)} id='ruMax' placeholder=\"RU max\"\n                />\n\n              </FormGroup>\n\n            </Col>\n          </Row>\n        </Form>\n      </Col>\n\n    </>\n  );\n}\n\nFieldSoilForm.defaultProps = {\n  isStandard: true,\n  SoilProp: \"Standard\",\n  depth: [\n    {\n      depth: 10,\n      clay: 20,\n      sand: 60,\n      silt: 20,\n      CEC: 1,\n      OM: 1,\n      pH: 2,\n      Ecd: 1,\n      uni: \"Clay\",\n      soilProprety: \"Standard\"\n    }\n  ]\n};\n\nexport default FieldSoilForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}